
CoolingModule-Firmware-FE13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005150  08005150  00006150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005198  08005198  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a0  080051a0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a0  080051a0  000061a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051a4  080051a4  000061a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080051a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00000394  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e57  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002505  00000000  00000000  00017ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  0001a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b71  00000000  00000000  0001b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002136d  00000000  00000000  0001be19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117be  00000000  00000000  0003d186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd20  00000000  00000000  0004e944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e664  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004350  00000000  00000000  0011e6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001229f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005138 	.word	0x08005138

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08005138 	.word	0x08005138

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <ADC_Input_Init>:
 */

#include "adc.h"

void ADC_Input_Init(ADC_Input_t* adc, ADC_HandleTypeDef* h_adc, uint32_t channel, uint32_t rank, uint32_t sample_time)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
	adc->h_adc = h_adc;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	601a      	str	r2, [r3, #0]
	adc->sConfig.Channel = channel;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	605a      	str	r2, [r3, #4]
	adc->sConfig.Rank = rank;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	609a      	str	r2, [r3, #8]
	adc->sConfig.SamplingTime = sample_time;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	60da      	str	r2, [r3, #12]
	adc->value = 0;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	829a      	strh	r2, [r3, #20]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <ADC_Measure>:

HAL_StatusTypeDef ADC_Measure(ADC_Input_t* adc, uint32_t timeout)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_res = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]

	// select ADC channel
	hal_res = HAL_ADC_ConfigChannel(adc->h_adc, &adc->sConfig);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3304      	adds	r3, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	f001 fa93 	bl	800240c <HAL_ADC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <ADC_Measure+0x2c>
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	e022      	b.n	8000f3a <ADC_Measure+0x72>

	// begin conversion
	hal_res = HAL_ADC_Start(adc->h_adc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f91d 	bl	8002138 <HAL_ADC_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <ADC_Measure+0x44>
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	e016      	b.n	8000f3a <ADC_Measure+0x72>

	// wait for conversion to complete
	hal_res = HAL_ADC_PollForConversion(adc->h_adc, timeout);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6839      	ldr	r1, [r7, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f9e2 	bl	80022dc <HAL_ADC_PollForConversion>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <ADC_Measure+0x5e>
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	e009      	b.n	8000f3a <ADC_Measure+0x72>

	adc->value = HAL_ADC_GetValue(adc->h_adc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fa61 	bl	80023f2 <HAL_ADC_GetValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	829a      	strh	r2, [r3, #20]
	return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <CAN_Filter_Init>:
extern CAN_HandleTypeDef hcan2;

CAN_DATA_t can_data;

void CAN_Filter_Init()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
	// Filter vehicle state messages into FIFO0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	623b      	str	r3, [r7, #32]
	can_filter.SlaveStartFilterBank = 20; // how many of the 28 filters to assign to the HCAN1 (master can)
 8000f4e:	2314      	movs	r3, #20
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
	can_filter.FilterBank = 0; // which filter bank to use
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
	if (HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK) {
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <CAN_Filter_Init+0x6c>)
 8000f78:	f001 fd62 	bl	8002a40 <HAL_CAN_ConfigFilter>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <CAN_Filter_Init+0x42>
	  Error_Handler();
 8000f82:	f000 fd5d 	bl	8001a40 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000f86:	2102      	movs	r1, #2
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <CAN_Filter_Init+0x6c>)
 8000f8a:	f001 ff80 	bl	8002e8e <HAL_CAN_ActivateNotification>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <CAN_Filter_Init+0x54>
		Error_Handler();
 8000f94:	f000 fd54 	bl	8001a40 <Error_Handler>
	}
	if ( HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <CAN_Filter_Init+0x6c>)
 8000f9a:	f001 fe2f 	bl	8002bfc <HAL_CAN_Start>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <CAN_Filter_Init+0x64>
		Error_Handler();
 8000fa4:	f000 fd4c 	bl	8001a40 <Error_Handler>
	}
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	@ 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200001e0 	.word	0x200001e0

08000fb4 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(CAN_HandleTypeDef *hcan_ptr, uint32_t id, uint8_t* data, uint8_t len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	70fb      	strb	r3, [r7, #3]
	static uint32_t TxMailbox;
	static CAN_TxHeaderTypeDef msg_hdr;
	msg_hdr.IDE = CAN_ID_STD;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <CAN_Send+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
	msg_hdr.StdId = id;
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <CAN_Send+0x4c>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	6013      	str	r3, [r2, #0]
	msg_hdr.RTR = CAN_RTR_DATA;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <CAN_Send+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
	msg_hdr.DLC = len;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <CAN_Send+0x4c>)
 8000fd8:	6113      	str	r3, [r2, #16]

	if(HAL_CAN_GetTxMailboxesFreeLevel(hcan_ptr) == 0) return HAL_OK;
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f001 ff22 	bl	8002e24 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <CAN_Send+0x36>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e006      	b.n	8000ff8 <CAN_Send+0x44>
	return HAL_CAN_AddTxMessage(hcan_ptr, &msg_hdr, data, &TxMailbox);
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <CAN_Send+0x50>)
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4904      	ldr	r1, [pc, #16]	@ (8001000 <CAN_Send+0x4c>)
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f001 fe47 	bl	8002c84 <HAL_CAN_AddTxMessage>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000098 	.word	0x20000098
 8001004:	200000b0 	.word	0x200000b0

08001008 <Cooling_Init>:
int16_t get_air_temp(uint16_t adc_val);
void set_fan_speed(uint8_t speed);
void set_pump_speed(uint8_t speed);
void update_pwm(int16_t inlet_temp);

void Cooling_Init(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8
	// TODO check channels
	ADC_Input_Init(&adc_inlet_temp, &hadc1, ADC_CHANNEL_0, 1, ADC_SAMPLETIME_480CYCLES);
 800100e:	2307      	movs	r3, #7
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2200      	movs	r2, #0
 8001016:	492a      	ldr	r1, [pc, #168]	@ (80010c0 <Cooling_Init+0xb8>)
 8001018:	482a      	ldr	r0, [pc, #168]	@ (80010c4 <Cooling_Init+0xbc>)
 800101a:	f7ff ff39 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_outlet_temp, &hadc1, ADC_CHANNEL_1, 1, ADC_SAMPLETIME_480CYCLES);
 800101e:	2307      	movs	r3, #7
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	2201      	movs	r2, #1
 8001026:	4926      	ldr	r1, [pc, #152]	@ (80010c0 <Cooling_Init+0xb8>)
 8001028:	4827      	ldr	r0, [pc, #156]	@ (80010c8 <Cooling_Init+0xc0>)
 800102a:	f7ff ff31 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_air_in_temp, &hadc1, ADC_CHANNEL_2, 1, ADC_SAMPLETIME_480CYCLES);
 800102e:	2307      	movs	r3, #7
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	2202      	movs	r2, #2
 8001036:	4922      	ldr	r1, [pc, #136]	@ (80010c0 <Cooling_Init+0xb8>)
 8001038:	4824      	ldr	r0, [pc, #144]	@ (80010cc <Cooling_Init+0xc4>)
 800103a:	f7ff ff29 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_air_out_temp, &hadc1, ADC_CHANNEL_3, 1, ADC_SAMPLETIME_480CYCLES);
 800103e:	2307      	movs	r3, #7
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	491e      	ldr	r1, [pc, #120]	@ (80010c0 <Cooling_Init+0xb8>)
 8001048:	4821      	ldr	r0, [pc, #132]	@ (80010d0 <Cooling_Init+0xc8>)
 800104a:	f7ff ff21 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_1, &hadc1, ADC_CHANNEL_14, 1, ADC_SAMPLETIME_480CYCLES);
 800104e:	2307      	movs	r3, #7
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	220e      	movs	r2, #14
 8001056:	491a      	ldr	r1, [pc, #104]	@ (80010c0 <Cooling_Init+0xb8>)
 8001058:	481e      	ldr	r0, [pc, #120]	@ (80010d4 <Cooling_Init+0xcc>)
 800105a:	f7ff ff19 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_2, &hadc1, ADC_CHANNEL_15, 1, ADC_SAMPLETIME_480CYCLES);
 800105e:	2307      	movs	r3, #7
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	220f      	movs	r2, #15
 8001066:	4916      	ldr	r1, [pc, #88]	@ (80010c0 <Cooling_Init+0xb8>)
 8001068:	481b      	ldr	r0, [pc, #108]	@ (80010d8 <Cooling_Init+0xd0>)
 800106a:	f7ff ff11 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_3, &hadc1, ADC_CHANNEL_8, 1, ADC_SAMPLETIME_480CYCLES);
 800106e:	2307      	movs	r3, #7
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	2208      	movs	r2, #8
 8001076:	4912      	ldr	r1, [pc, #72]	@ (80010c0 <Cooling_Init+0xb8>)
 8001078:	4818      	ldr	r0, [pc, #96]	@ (80010dc <Cooling_Init+0xd4>)
 800107a:	f7ff ff09 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_4, &hadc1, ADC_CHANNEL_9, 1, ADC_SAMPLETIME_480CYCLES);
 800107e:	2307      	movs	r3, #7
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	2209      	movs	r2, #9
 8001086:	490e      	ldr	r1, [pc, #56]	@ (80010c0 <Cooling_Init+0xb8>)
 8001088:	4815      	ldr	r0, [pc, #84]	@ (80010e0 <Cooling_Init+0xd8>)
 800108a:	f7ff ff01 	bl	8000e90 <ADC_Input_Init>
	//  ADC_Input_Init(&adc_inlet_pres, &hadc1, ADC_CHANNEL_4, 1, ADC_SAMPLETIME_480CYCLES);
	//	ADC_Input_Init(&adc_outlet_pres, &hadc1, ADC_CHANNEL_5, 1, ADC_SAMPLETIME_480CYCLES);

	PWM_Init(&pwm_fan, &htim1, TIM_CHANNEL_1);
 800108e:	2200      	movs	r2, #0
 8001090:	4914      	ldr	r1, [pc, #80]	@ (80010e4 <Cooling_Init+0xdc>)
 8001092:	4815      	ldr	r0, [pc, #84]	@ (80010e8 <Cooling_Init+0xe0>)
 8001094:	f000 fcda 	bl	8001a4c <PWM_Init>
	PWM_Init(&pwm_pump, &htim1, TIM_CHANNEL_2);
 8001098:	2204      	movs	r2, #4
 800109a:	4912      	ldr	r1, [pc, #72]	@ (80010e4 <Cooling_Init+0xdc>)
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <Cooling_Init+0xe4>)
 800109e:	f000 fcd5 	bl	8001a4c <PWM_Init>
	PWM_Init(&pwm_extra, &htim1, TIM_CHANNEL_3);
 80010a2:	2208      	movs	r2, #8
 80010a4:	490f      	ldr	r1, [pc, #60]	@ (80010e4 <Cooling_Init+0xdc>)
 80010a6:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <Cooling_Init+0xe8>)
 80010a8:	f000 fcd0 	bl	8001a4c <PWM_Init>

	set_pump_speed(255);
 80010ac:	20ff      	movs	r0, #255	@ 0xff
 80010ae:	f000 fa0f 	bl	80014d0 <set_pump_speed>
	set_fan_speed(128);
 80010b2:	2080      	movs	r0, #128	@ 0x80
 80010b4:	f000 fa1c 	bl	80014f0 <set_fan_speed>
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000198 	.word	0x20000198
 80010c4:	200000b4 	.word	0x200000b4
 80010c8:	200000cc 	.word	0x200000cc
 80010cc:	200000e4 	.word	0x200000e4
 80010d0:	200000fc 	.word	0x200000fc
 80010d4:	20000114 	.word	0x20000114
 80010d8:	2000012c 	.word	0x2000012c
 80010dc:	20000144 	.word	0x20000144
 80010e0:	2000015c 	.word	0x2000015c
 80010e4:	20000230 	.word	0x20000230
 80010e8:	20000174 	.word	0x20000174
 80010ec:	2000017c 	.word	0x2000017c
 80010f0:	20000184 	.word	0x20000184

080010f4 <Cooling_Update>:

void Cooling_Update()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	static uint8_t loop_count = 0;
	static uint8_t tx_data[8];


	loop_count++;
 80010fa:	4b3d      	ldr	r3, [pc, #244]	@ (80011f0 <Cooling_Update+0xfc>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b3b      	ldr	r3, [pc, #236]	@ (80011f0 <Cooling_Update+0xfc>)
 8001104:	701a      	strb	r2, [r3, #0]
	if(loop_count <= SLOW_DIVIDER) return;
 8001106:	4b3a      	ldr	r3, [pc, #232]	@ (80011f0 <Cooling_Update+0xfc>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b32      	cmp	r3, #50	@ 0x32
 800110c:	d96b      	bls.n	80011e6 <Cooling_Update+0xf2>
	loop_count = 0;
 800110e:	4b38      	ldr	r3, [pc, #224]	@ (80011f0 <Cooling_Update+0xfc>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]

	// NOTE: can send temps and pressures at reduced frequency if CAN traffic too high

	ADC_Measure(&adc_inlet_temp, 1000);
 8001114:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001118:	4836      	ldr	r0, [pc, #216]	@ (80011f4 <Cooling_Update+0x100>)
 800111a:	f7ff fed5 	bl	8000ec8 <ADC_Measure>
	ADC_Measure(&adc_outlet_temp, 1000);
 800111e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001122:	4835      	ldr	r0, [pc, #212]	@ (80011f8 <Cooling_Update+0x104>)
 8001124:	f7ff fed0 	bl	8000ec8 <ADC_Measure>
	ADC_Measure(&adc_air_in_temp, 1000);
 8001128:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800112c:	4833      	ldr	r0, [pc, #204]	@ (80011fc <Cooling_Update+0x108>)
 800112e:	f7ff fecb 	bl	8000ec8 <ADC_Measure>
	ADC_Measure(&adc_air_out_temp, 1000);
 8001132:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001136:	4832      	ldr	r0, [pc, #200]	@ (8001200 <Cooling_Update+0x10c>)
 8001138:	f7ff fec6 	bl	8000ec8 <ADC_Measure>

	int16_t inlet_temp = get_temp(adc_inlet_temp.value);
 800113c:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <Cooling_Update+0x100>)
 800113e:	8a9b      	ldrh	r3, [r3, #20]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f8f5 	bl	8001330 <get_temp>
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
	int16_t outlet_temp = get_temp(adc_outlet_temp.value);
 800114a:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <Cooling_Update+0x104>)
 800114c:	8a9b      	ldrh	r3, [r3, #20]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f8ee 	bl	8001330 <get_temp>
 8001154:	4603      	mov	r3, r0
 8001156:	80bb      	strh	r3, [r7, #4]
	int16_t temp_air_in = get_air_temp(adc_air_in_temp.value);
 8001158:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <Cooling_Update+0x108>)
 800115a:	8a9b      	ldrh	r3, [r3, #20]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f95b 	bl	8001418 <get_air_temp>
 8001162:	4603      	mov	r3, r0
 8001164:	807b      	strh	r3, [r7, #2]
	int16_t temp_air_out = get_air_temp(adc_air_out_temp.value);
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <Cooling_Update+0x10c>)
 8001168:	8a9b      	ldrh	r3, [r3, #20]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f954 	bl	8001418 <get_air_temp>
 8001170:	4603      	mov	r3, r0
 8001172:	803b      	strh	r3, [r7, #0]

	tx_data[0] = HI8(inlet_temp);
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001178:	121b      	asrs	r3, r3, #8
 800117a:	b21b      	sxth	r3, r3
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <Cooling_Update+0x110>)
 8001180:	701a      	strb	r2, [r3, #0]
	tx_data[1] = LO8(inlet_temp);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <Cooling_Update+0x110>)
 8001188:	705a      	strb	r2, [r3, #1]
	tx_data[2] = HI8(outlet_temp);
 800118a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800118e:	121b      	asrs	r3, r3, #8
 8001190:	b21b      	sxth	r3, r3
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <Cooling_Update+0x110>)
 8001196:	709a      	strb	r2, [r3, #2]
	tx_data[3] = LO8(outlet_temp);
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <Cooling_Update+0x110>)
 800119e:	70da      	strb	r2, [r3, #3]
	tx_data[4] = HI8(temp_air_in);
 80011a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011a4:	121b      	asrs	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <Cooling_Update+0x110>)
 80011ac:	711a      	strb	r2, [r3, #4]
	tx_data[5] = LO8(temp_air_in);
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <Cooling_Update+0x110>)
 80011b4:	715a      	strb	r2, [r3, #5]
	tx_data[6] = HI8(temp_air_out);
 80011b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011ba:	121b      	asrs	r3, r3, #8
 80011bc:	b21b      	sxth	r3, r3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <Cooling_Update+0x110>)
 80011c2:	719a      	strb	r2, [r3, #6]
	tx_data[7] = LO8(temp_air_out);
 80011c4:	883b      	ldrh	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <Cooling_Update+0x110>)
 80011ca:	71da      	strb	r2, [r3, #7]
	CAN_Send(&hcan2, COOLING_LOOP_TEMPS, tx_data, 8);
 80011cc:	2308      	movs	r3, #8
 80011ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <Cooling_Update+0x110>)
 80011d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <Cooling_Update+0x114>)
 80011d6:	f7ff feed 	bl	8000fb4 <CAN_Send>
//	tx_data[3] = LO8(outlet_pres);
//	CAN_Send(&hcan2, COOLING_LOOP_PRESSURES, tx_data, 4);



	update_pwm(inlet_temp);
 80011da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f814 	bl	800120c <update_pwm>
 80011e4:	e000      	b.n	80011e8 <Cooling_Update+0xf4>
	if(loop_count <= SLOW_DIVIDER) return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000018c 	.word	0x2000018c
 80011f4:	200000b4 	.word	0x200000b4
 80011f8:	200000cc 	.word	0x200000cc
 80011fc:	200000e4 	.word	0x200000e4
 8001200:	200000fc 	.word	0x200000fc
 8001204:	20000190 	.word	0x20000190
 8001208:	20000208 	.word	0x20000208

0800120c <update_pwm>:

void update_pwm(int16_t inlet_temp)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	//set_pump_speed(40);

	// allow cooling override: use hardcoded values for pump and fan speed
	if (can_data.PWM_requested) {
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <update_pwm+0x110>)
 8001218:	7b5b      	ldrb	r3, [r3, #13]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <update_pwm+0x20>
		set_pump_speed(255);
 800121e:	20ff      	movs	r0, #255	@ 0xff
 8001220:	f000 f956 	bl	80014d0 <set_pump_speed>
		set_fan_speed(128);
 8001224:	2080      	movs	r0, #128	@ 0x80
 8001226:	f000 f963 	bl	80014f0 <set_fan_speed>
		return;
 800122a:	e073      	b.n	8001314 <update_pwm+0x108>
	static int fan_t2 = FAN_THRESH_2 + HYSTERESIS;
	static int fan_t3 = FAN_THRESH_2 + HYSTERESIS;
	static int pump_t = PUMP_THRESH + HYSTERESIS;

	//TODO: update these values to consider ambient air temp, vehicle speed, etc?
	if(can_data.inverter_enable || (can_data.mc_temp_max > pump_t) || (can_data.motor_temp > pump_t)){
 800122c:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <update_pwm+0x110>)
 800122e:	7b1b      	ldrb	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10f      	bne.n	8001254 <update_pwm+0x48>
 8001234:	4b39      	ldr	r3, [pc, #228]	@ (800131c <update_pwm+0x110>)
 8001236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800123a:	461a      	mov	r2, r3
 800123c:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <update_pwm+0x114>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	dc07      	bgt.n	8001254 <update_pwm+0x48>
 8001244:	4b35      	ldr	r3, [pc, #212]	@ (800131c <update_pwm+0x110>)
 8001246:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800124a:	461a      	mov	r2, r3
 800124c:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <update_pwm+0x114>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	dd07      	ble.n	8001264 <update_pwm+0x58>
		set_pump_speed(255);
 8001254:	20ff      	movs	r0, #255	@ 0xff
 8001256:	f000 f93b 	bl	80014d0 <set_pump_speed>
		pump_t = PUMP_THRESH;
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <update_pwm+0x114>)
 800125c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e006      	b.n	8001272 <update_pwm+0x66>
	} else {
		set_pump_speed(0);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 f933 	bl	80014d0 <set_pump_speed>
		pump_t = PUMP_THRESH + HYSTERESIS;
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <update_pwm+0x114>)
 800126c:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001270:	601a      	str	r2, [r3, #0]
	}

	if(inlet_temp > fan_t3){
 8001272:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001276:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <update_pwm+0x118>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	dd0f      	ble.n	800129e <update_pwm+0x92>
		set_fan_speed(255);
 800127e:	20ff      	movs	r0, #255	@ 0xff
 8001280:	f000 f936 	bl	80014f0 <set_fan_speed>
		fan_t1 = FAN_THRESH_1;
 8001284:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <update_pwm+0x11c>)
 8001286:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800128a:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2;
 800128c:	4b27      	ldr	r3, [pc, #156]	@ (800132c <update_pwm+0x120>)
 800128e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001292:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3;
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <update_pwm+0x118>)
 8001296:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e03a      	b.n	8001314 <update_pwm+0x108>
	} else if(inlet_temp > fan_t2){
 800129e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012a2:	4b22      	ldr	r3, [pc, #136]	@ (800132c <update_pwm+0x120>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dd0f      	ble.n	80012ca <update_pwm+0xbe>
		set_fan_speed(180);
 80012aa:	20b4      	movs	r0, #180	@ 0xb4
 80012ac:	f000 f920 	bl	80014f0 <set_fan_speed>
		fan_t1 = FAN_THRESH_1;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <update_pwm+0x11c>)
 80012b2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012b6:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <update_pwm+0x120>)
 80012ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012be:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3 + HYSTERESIS;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <update_pwm+0x118>)
 80012c2:	f240 2276 	movw	r2, #630	@ 0x276
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e024      	b.n	8001314 <update_pwm+0x108>
	} else if(inlet_temp > fan_t1){
 80012ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <update_pwm+0x11c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dd0f      	ble.n	80012f6 <update_pwm+0xea>
		fan_t1 = FAN_THRESH_1;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <update_pwm+0x11c>)
 80012d8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012dc:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2 + HYSTERESIS;
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <update_pwm+0x120>)
 80012e0:	f240 2212 	movw	r2, #530	@ 0x212
 80012e4:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3 + HYSTERESIS;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <update_pwm+0x118>)
 80012e8:	f240 2276 	movw	r2, #630	@ 0x276
 80012ec:	601a      	str	r2, [r3, #0]
		set_fan_speed(100);
 80012ee:	2064      	movs	r0, #100	@ 0x64
 80012f0:	f000 f8fe 	bl	80014f0 <set_fan_speed>
 80012f4:	e00e      	b.n	8001314 <update_pwm+0x108>
	} else {
		fan_t1 = FAN_THRESH_1 + HYSTERESIS;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <update_pwm+0x11c>)
 80012f8:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80012fc:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2 + HYSTERESIS;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <update_pwm+0x120>)
 8001300:	f240 2212 	movw	r2, #530	@ 0x212
 8001304:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3 + HYSTERESIS;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <update_pwm+0x118>)
 8001308:	f240 2276 	movw	r2, #630	@ 0x276
 800130c:	601a      	str	r2, [r3, #0]
		set_fan_speed(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f8ee 	bl	80014f0 <set_fan_speed>
	}
}
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000088 	.word	0x20000088
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
 8001328:	20000008 	.word	0x20000008
 800132c:	2000000c 	.word	0x2000000c

08001330 <get_temp>:

int16_t get_temp(uint16_t adc_val)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	// need to recalibrate these sensors with new GE2098(Already calibrated)
	float temp = (99.2596*exp((-3.22926) * adc_val / 4095) - 21.4981-3.17)/1.01085;
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f895 	bl	800046c <__aeabi_i2d>
 8001342:	a329      	add	r3, pc, #164	@ (adr r3, 80013e8 <get_temp+0xb8>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f8fa 	bl	8000540 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	a326      	add	r3, pc, #152	@ (adr r3, 80013f0 <get_temp+0xc0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fa1b 	bl	8000794 <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	ec43 2b17 	vmov	d7, r2, r3
 8001366:	eeb0 0a47 	vmov.f32	s0, s14
 800136a:	eef0 0a67 	vmov.f32	s1, s15
 800136e:	f003 fcd7 	bl	8004d20 <exp>
 8001372:	ec51 0b10 	vmov	r0, r1, d0
 8001376:	a320      	add	r3, pc, #128	@ (adr r3, 80013f8 <get_temp+0xc8>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff f8e0 	bl	8000540 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	a31d      	add	r3, pc, #116	@ (adr r3, 8001400 <get_temp+0xd0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7fe ff1f 	bl	80001d0 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001408 <get_temp+0xd8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff16 	bl	80001d0 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	a318      	add	r3, pc, #96	@ (adr r3, 8001410 <get_temp+0xe0>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f9ef 	bl	8000794 <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fb81 	bl	8000ac4 <__aeabi_d2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	60fb      	str	r3, [r7, #12]
	return (int16_t) (temp*10);
 80013c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	b21b      	sxth	r3, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	44523f68 	.word	0x44523f68
 80013ec:	c009d586 	.word	0xc009d586
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40affe00 	.word	0x40affe00
 80013f8:	495182aa 	.word	0x495182aa
 80013fc:	4058d09d 	.word	0x4058d09d
 8001400:	7b4a233a 	.word	0x7b4a233a
 8001404:	40357f83 	.word	0x40357f83
 8001408:	f5c28f5c 	.word	0xf5c28f5c
 800140c:	40095c28 	.word	0x40095c28
 8001410:	0cb295ea 	.word	0x0cb295ea
 8001414:	3ff02c71 	.word	0x3ff02c71

08001418 <get_air_temp>:

int16_t get_air_temp(uint16_t adc_val)
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	80fb      	strh	r3, [r7, #6]
	float temp = 83.35412 - 0.03634221 * adc_val +0.0000034466 * adc_val * adc_val;
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f820 	bl	800046c <__aeabi_i2d>
 800142c:	a322      	add	r3, pc, #136	@ (adr r3, 80014b8 <get_air_temp+0xa0>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f885 	bl	8000540 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	a121      	add	r1, pc, #132	@ (adr r1, 80014c0 <get_air_temp+0xa8>)
 800143c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001440:	f7fe fec6 	bl	80001d0 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4614      	mov	r4, r2
 800144a:	461d      	mov	r5, r3
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f80c 	bl	800046c <__aeabi_i2d>
 8001454:	a31c      	add	r3, pc, #112	@ (adr r3, 80014c8 <get_air_temp+0xb0>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f871 	bl	8000540 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4690      	mov	r8, r2
 8001464:	4699      	mov	r9, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffff 	bl	800046c <__aeabi_i2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4640      	mov	r0, r8
 8001474:	4649      	mov	r1, r9
 8001476:	f7ff f863 	bl	8000540 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe fea7 	bl	80001d4 <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fb19 	bl	8000ac4 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	60fb      	str	r3, [r7, #12]
	return (int16_t) (temp *10);
 8001496:	edd7 7a03 	vldr	s15, [r7, #12]
 800149a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a6:	ee17 3a90 	vmov	r3, s15
 80014aa:	b21b      	sxth	r3, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014b6:	bf00      	nop
 80014b8:	36d4278a 	.word	0x36d4278a
 80014bc:	3fa29b72 	.word	0x3fa29b72
 80014c0:	e6eeb702 	.word	0xe6eeb702
 80014c4:	4054d6a9 	.word	0x4054d6a9
 80014c8:	635d8fac 	.word	0x635d8fac
 80014cc:	3ecce984 	.word	0x3ecce984

080014d0 <set_pump_speed>:


void set_pump_speed(uint8_t speed)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	PWM_SetDutyCycle(&pwm_pump, speed);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4619      	mov	r1, r3
 80014de:	4803      	ldr	r0, [pc, #12]	@ (80014ec <set_pump_speed+0x1c>)
 80014e0:	f000 faca 	bl	8001a78 <PWM_SetDutyCycle>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000017c 	.word	0x2000017c

080014f0 <set_fan_speed>:

void set_fan_speed(uint8_t speed)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	PWM_SetDutyCycle(&pwm_fan, speed);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <set_fan_speed+0x1c>)
 8001500:	f000 faba 	bl	8001a78 <PWM_SetDutyCycle>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000174 	.word	0x20000174

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f000 fd5a 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f816 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 fa4c 	bl	80019b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001520:	f000 fa2a 	bl	8001978 <MX_DMA_Init>
  MX_CAN1_Init();
 8001524:	f000 f8f6 	bl	8001714 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001528:	f000 f92a 	bl	8001780 <MX_CAN2_Init>
  MX_ADC1_Init();
 800152c:	f000 f876 	bl	800161c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001530:	f000 f95c 	bl	80017ec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001534:	f000 f9f6 	bl	8001924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  CAN_Filter_Init(); // hcan1 is PCAN, hcan2 is TCAN
 8001538:	f7ff fd04 	bl	8000f44 <CAN_Filter_Init>
  Cooling_Init();
 800153c:	f7ff fd64 	bl	8001008 <Cooling_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Cooling_Update();
 8001540:	f7ff fdd8 	bl	80010f4 <Cooling_Update>
 8001544:	e7fc      	b.n	8001540 <main+0x30>
	...

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	@ 0x50
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2230      	movs	r2, #48	@ 0x30
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fbae 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <SystemClock_Config+0xcc>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	4a27      	ldr	r2, [pc, #156]	@ (8001614 <SystemClock_Config+0xcc>)
 8001576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
 800157c:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <SystemClock_Config+0xcc>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <SystemClock_Config+0xd0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a21      	ldr	r2, [pc, #132]	@ (8001618 <SystemClock_Config+0xd0>)
 8001592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <SystemClock_Config+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ae:	2302      	movs	r3, #2
 80015b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015b8:	2319      	movs	r3, #25
 80015ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c6:	2304      	movs	r3, #4
 80015c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	f107 0320 	add.w	r3, r7, #32
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 ff32 	bl	8003438 <HAL_RCC_OscConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015da:	f000 fa31 	bl	8001a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015de:	230f      	movs	r3, #15
 80015e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e2:	2302      	movs	r3, #2
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	2105      	movs	r1, #5
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 f993 	bl	8003928 <HAL_RCC_ClockConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001608:	f000 fa1a 	bl	8001a40 <Error_Handler>
  }
}
 800160c:	bf00      	nop
 800160e:	3750      	adds	r7, #80	@ 0x50
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40007000 	.word	0x40007000

0800161c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001622:	463b      	mov	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800162e:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001630:	4a36      	ldr	r2, [pc, #216]	@ (800170c <MX_ADC1_Init+0xf0>)
 8001632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001636:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800163a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800163c:	4b32      	ldr	r3, [pc, #200]	@ (8001708 <MX_ADC1_Init+0xec>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001644:	2201      	movs	r2, #1
 8001646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001648:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <MX_ADC1_Init+0xec>)
 800164a:	2201      	movs	r2, #1
 800164c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800164e:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001656:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165c:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <MX_ADC1_Init+0xec>)
 800165e:	4a2c      	ldr	r2, [pc, #176]	@ (8001710 <MX_ADC1_Init+0xf4>)
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001662:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001668:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <MX_ADC1_Init+0xec>)
 800166a:	2204      	movs	r2, #4
 800166c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800166e:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001676:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <MX_ADC1_Init+0xec>)
 8001678:	2201      	movs	r2, #1
 800167a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800167c:	4822      	ldr	r0, [pc, #136]	@ (8001708 <MX_ADC1_Init+0xec>)
 800167e:	f000 fd17 	bl	80020b0 <HAL_ADC_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001688:	f000 f9da 	bl	8001a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001690:	2301      	movs	r3, #1
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	481a      	ldr	r0, [pc, #104]	@ (8001708 <MX_ADC1_Init+0xec>)
 800169e:	f000 feb5 	bl	800240c <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016a8:	f000 f9ca 	bl	8001a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	4813      	ldr	r0, [pc, #76]	@ (8001708 <MX_ADC1_Init+0xec>)
 80016ba:	f000 fea7 	bl	800240c <HAL_ADC_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016c4:	f000 f9bc 	bl	8001a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016cc:	2303      	movs	r3, #3
 80016ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <MX_ADC1_Init+0xec>)
 80016d6:	f000 fe99 	bl	800240c <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80016e0:	f000 f9ae 	bl	8001a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016e4:	2303      	movs	r3, #3
 80016e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016e8:	2304      	movs	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_ADC1_Init+0xec>)
 80016f2:	f000 fe8b 	bl	800240c <HAL_ADC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016fc:	f000 f9a0 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000198 	.word	0x20000198
 800170c:	40012000 	.word	0x40012000
 8001710:	0f000001 	.word	0x0f000001

08001714 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001718:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <MX_CAN1_Init+0x64>)
 800171a:	4a18      	ldr	r2, [pc, #96]	@ (800177c <MX_CAN1_Init+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800171e:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001720:	220a      	movs	r2, #10
 8001722:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001724:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <MX_CAN1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001732:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001736:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_CAN1_Init+0x64>)
 800173a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800173e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001740:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001742:	2200      	movs	r2, #0
 8001744:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800174c:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <MX_CAN1_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <MX_CAN1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	@ (8001778 <MX_CAN1_Init+0x64>)
 8001766:	f001 f86f 	bl	8002848 <HAL_CAN_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001770:	f000 f966 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200001e0 	.word	0x200001e0
 800177c:	40006400 	.word	0x40006400

08001780 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_CAN2_Init+0x64>)
 8001786:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <MX_CAN2_Init+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_CAN2_Init+0x64>)
 800178c:	220a      	movs	r2, #10
 800178e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_CAN2_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <MX_CAN2_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <MX_CAN2_Init+0x64>)
 800179e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80017aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_CAN2_Init+0x64>)
 80017d2:	f001 f839 	bl	8002848 <HAL_CAN_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80017dc:	f000 f930 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000208 	.word	0x20000208
 80017e8:	40006800 	.word	0x40006800

080017ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b092      	sub	sp, #72	@ 0x48
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2220      	movs	r2, #32
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fa4e 	bl	8004cb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800181c:	4b3f      	ldr	r3, [pc, #252]	@ (800191c <MX_TIM1_Init+0x130>)
 800181e:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <MX_TIM1_Init+0x134>)
 8001820:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <MX_TIM1_Init+0x130>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b3c      	ldr	r3, [pc, #240]	@ (800191c <MX_TIM1_Init+0x130>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800182e:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <MX_TIM1_Init+0x130>)
 8001830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001834:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b39      	ldr	r3, [pc, #228]	@ (800191c <MX_TIM1_Init+0x130>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800183c:	4b37      	ldr	r3, [pc, #220]	@ (800191c <MX_TIM1_Init+0x130>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b36      	ldr	r3, [pc, #216]	@ (800191c <MX_TIM1_Init+0x130>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001848:	4834      	ldr	r0, [pc, #208]	@ (800191c <MX_TIM1_Init+0x130>)
 800184a:	f002 fa4d 	bl	8003ce8 <HAL_TIM_PWM_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001854:	f000 f8f4 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001860:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001864:	4619      	mov	r1, r3
 8001866:	482d      	ldr	r0, [pc, #180]	@ (800191c <MX_TIM1_Init+0x130>)
 8001868:	f002 fe94 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001872:	f000 f8e5 	bl	8001a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001876:	2360      	movs	r3, #96	@ 0x60
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	2200      	movs	r2, #0
 8001898:	4619      	mov	r1, r3
 800189a:	4820      	ldr	r0, [pc, #128]	@ (800191c <MX_TIM1_Init+0x130>)
 800189c:	f002 fb3c 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80018a6:	f000 f8cb 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ae:	2204      	movs	r2, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	481a      	ldr	r0, [pc, #104]	@ (800191c <MX_TIM1_Init+0x130>)
 80018b4:	f002 fb30 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80018be:	f000 f8bf 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c6:	2208      	movs	r2, #8
 80018c8:	4619      	mov	r1, r3
 80018ca:	4814      	ldr	r0, [pc, #80]	@ (800191c <MX_TIM1_Init+0x130>)
 80018cc:	f002 fb24 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80018d6:	f000 f8b3 	bl	8001a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4807      	ldr	r0, [pc, #28]	@ (800191c <MX_TIM1_Init+0x130>)
 80018fe:	f002 fec5 	bl	800468c <HAL_TIMEx_ConfigBreakDeadTime>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001908:	f000 f89a 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800190c:	4803      	ldr	r0, [pc, #12]	@ (800191c <MX_TIM1_Init+0x130>)
 800190e:	f000 fa6f 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8001912:	bf00      	nop
 8001914:	3748      	adds	r7, #72	@ 0x48
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000230 	.word	0x20000230
 8001920:	40010000 	.word	0x40010000

08001924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <MX_USART1_UART_Init+0x50>)
 800192c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800195c:	f002 fee8 	bl	8004730 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001966:	f000 f86b 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000278 	.word	0x20000278
 8001974:	40011000 	.word	0x40011000

08001978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_DMA_Init+0x3c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <MX_DMA_Init+0x3c>)
 8001988:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_DMA_Init+0x3c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2038      	movs	r0, #56	@ 0x38
 80019a0:	f001 fb77 	bl	8003092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019a4:	2038      	movs	r0, #56	@ 0x38
 80019a6:	f001 fb90 	bl	80030ca <HAL_NVIC_EnableIRQ>

}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <MX_GPIO_Init+0x84>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <MX_GPIO_Init+0x84>)
 80019c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <MX_GPIO_Init+0x84>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <MX_GPIO_Init+0x84>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	4a16      	ldr	r2, [pc, #88]	@ (8001a3c <MX_GPIO_Init+0x84>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <MX_GPIO_Init+0x84>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <MX_GPIO_Init+0x84>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <MX_GPIO_Init+0x84>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <MX_GPIO_Init+0x84>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_GPIO_Init+0x84>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <MX_GPIO_Init+0x84>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_GPIO_Init+0x84>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <Error_Handler+0x8>

08001a4c <PWM_Init>:
 */

#include "pwm.h"

HAL_StatusTypeDef PWM_Init(PWM_Output_t* pwm, TIM_HandleTypeDef* h_tim, uint32_t channel)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
	pwm->h_tim = h_tim;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	601a      	str	r2, [r3, #0]
	pwm->channel = channel;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	605a      	str	r2, [r3, #4]

	return HAL_TIM_PWM_Start(h_tim, channel);
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	68b8      	ldr	r0, [r7, #8]
 8001a68:	f002 f98e 	bl	8003d88 <HAL_TIM_PWM_Start>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(PWM_Output_t* pwm, uint8_t duty)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
	uint32_t ccr = pwm->h_tim->Instance->ARR * (255-duty) / 255;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	4a22      	ldr	r2, [pc, #136]	@ (8001b20 <PWM_SetDutyCycle+0xa8>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	09db      	lsrs	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

	switch(pwm->channel)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d835      	bhi.n	8001b14 <PWM_SetDutyCycle+0x9c>
 8001aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <PWM_SetDutyCycle+0x38>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001ae5 	.word	0x08001ae5
 8001ab4:	08001b15 	.word	0x08001b15
 8001ab8:	08001b15 	.word	0x08001b15
 8001abc:	08001b15 	.word	0x08001b15
 8001ac0:	08001af1 	.word	0x08001af1
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001b15 	.word	0x08001b15
 8001acc:	08001b15 	.word	0x08001b15
 8001ad0:	08001afd 	.word	0x08001afd
 8001ad4:	08001b15 	.word	0x08001b15
 8001ad8:	08001b15 	.word	0x08001b15
 8001adc:	08001b15 	.word	0x08001b15
 8001ae0:	08001b09 	.word	0x08001b09
	{
		case TIM_CHANNEL_1:
			pwm->h_tim->Instance->CCR1 = ccr;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001aee:	e011      	b.n	8001b14 <PWM_SetDutyCycle+0x9c>
		case TIM_CHANNEL_2:
			pwm->h_tim->Instance->CCR2 = ccr;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001afa:	e00b      	b.n	8001b14 <PWM_SetDutyCycle+0x9c>
		case TIM_CHANNEL_3:
			pwm->h_tim->Instance->CCR3 = ccr;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001b06:	e005      	b.n	8001b14 <PWM_SetDutyCycle+0x9c>
		case TIM_CHANNEL_4:
			pwm->h_tim->Instance->CCR4 = ccr;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001b12:	bf00      	nop
		default:
			//YO WTF?
	}
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	80808081 	.word	0x80808081

08001b24 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
{

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a0f      	ldr	r2, [pc, #60]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_ADC_MspInit>:
  * @brief ADC MSP Initialization
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
{
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a31      	ldr	r2, [pc, #196]	@ (8001c58 <HAL_ADC_MspInit+0xe4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d15b      	bne.n	8001c4e <HAL_ADC_MspInit+0xda>
  if(hadc->Instance==ADC1)
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_ADC1_CLK_ENABLE();

 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a28      	ldr	r2, [pc, #160]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_ADC_MspInit+0xe8>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
 8001c06:	230f      	movs	r3, #15
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = TEMP0_ADC_Pin|TEMP1_ADC_Pin|TEMP2_ADC_Pin|TEMP3_ADC_Pin;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <HAL_ADC_MspInit+0xec>)
 8001c1a:	f001 fa71 	bl	8003100 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

 8001c1e:	2330      	movs	r3, #48	@ 0x30
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA_SENSOR_1_Pin|EXTRA_SENSOR_2_Pin;
 8001c22:	2303      	movs	r3, #3
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <HAL_ADC_MspInit+0xf0>)
 8001c32:	f001 fa65 	bl	8003100 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

 8001c36:	2303      	movs	r3, #3
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA_SENSOR_3_Pin|EXTRA_SENSOR_4_Pin;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4807      	ldr	r0, [pc, #28]	@ (8001c68 <HAL_ADC_MspInit+0xf4>)
 8001c4a:	f001 fa59 	bl	8003100 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4e:	bf00      	nop
 8001c50:	3730      	adds	r7, #48	@ 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40012000 	.word	0x40012000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_CAN_MspInit>:
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOA, TEMP0_ADC_Pin|TEMP1_ADC_Pin|TEMP2_ADC_Pin|TEMP3_ADC_Pin);

    HAL_GPIO_DeInit(GPIOC, EXTRA_SENSOR_1_Pin|EXTRA_SENSOR_2_Pin);
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	@ 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_DeInit(GPIOB, EXTRA_SENSOR_3_Pin|EXTRA_SENSOR_4_Pin);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a43      	ldr	r2, [pc, #268]	@ (8001d98 <HAL_CAN_MspInit+0x12c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d136      	bne.n	8001cfc <HAL_CAN_MspInit+0x90>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
 8001c8e:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <HAL_CAN_MspInit+0x130>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a41      	ldr	r2, [pc, #260]	@ (8001d9c <HAL_CAN_MspInit+0x130>)
 8001c96:	6013      	str	r3, [r2, #0]
  }
 8001c98:	4b40      	ldr	r3, [pc, #256]	@ (8001d9c <HAL_CAN_MspInit+0x130>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10d      	bne.n	8001cbc <HAL_CAN_MspInit+0x50>

 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	69bb      	ldr	r3, [r7, #24]
}

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	4a36      	ldr	r2, [pc, #216]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ccc:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]

/**
  * @brief CAN MSP Initialization
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
 8001cd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cdc:	61fb      	str	r3, [r7, #28]
  * @retval None
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
  */
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
{
 8001cea:	2309      	movs	r3, #9
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	482b      	ldr	r0, [pc, #172]	@ (8001da4 <HAL_CAN_MspInit+0x138>)
 8001cf6:	f001 fa03 	bl	8003100 <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cfa:	e048      	b.n	8001d8e <HAL_CAN_MspInit+0x122>
    /* Peripheral clock enable */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a29      	ldr	r2, [pc, #164]	@ (8001da8 <HAL_CAN_MspInit+0x13c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d143      	bne.n	8001d8e <HAL_CAN_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	4a24      	ldr	r2, [pc, #144]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d16:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**CAN1 GPIO Configuration
 8001d22:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <HAL_CAN_MspInit+0x130>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <HAL_CAN_MspInit+0x130>)
 8001d2a:	6013      	str	r3, [r2, #0]
    PB8     ------> CAN1_RX
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_CAN_MspInit+0x130>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10d      	bne.n	8001d50 <HAL_CAN_MspInit+0xe4>
    PB9     ------> CAN1_TX
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	4a18      	ldr	r2, [pc, #96]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	4a11      	ldr	r2, [pc, #68]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <HAL_CAN_MspInit+0x134>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]

 8001d6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d70:	61fb      	str	r3, [r7, #28]
    /* USER CODE BEGIN CAN1_MspInit 1 */
 8001d72:	2302      	movs	r3, #2
 8001d74:	623b      	str	r3, [r7, #32]

 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    /* USER CODE END CAN1_MspInit 1 */
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
 8001d7e:	2309      	movs	r3, #9
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  else if(hcan->Instance==CAN2)
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4806      	ldr	r0, [pc, #24]	@ (8001da4 <HAL_CAN_MspInit+0x138>)
 8001d8a:	f001 f9b9 	bl	8003100 <HAL_GPIO_Init>
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d8e:	bf00      	nop
 8001d90:	3730      	adds	r7, #48	@ 0x30
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40006400 	.word	0x40006400
 8001d9c:	200002c0 	.word	0x200002c0
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40006800 	.word	0x40006800

08001dac <HAL_TIM_PWM_MspInit>:
    /* Peripheral clock disable */
    __HAL_RCC_CAN2_CLK_DISABLE();
    HAL_RCC_CAN1_CLK_ENABLED--;
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
      __HAL_RCC_CAN1_CLK_DISABLE();
    }
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	@ (8001de8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10d      	bne.n	8001dda <HAL_TIM_PWM_MspInit+0x2e>
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    HAL_GPIO_DeInit(GPIOB, TCAN_RX_Pin|TCAN_TX_Pin);

 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <HAL_TIM_PWM_MspInit+0x40>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <HAL_TIM_PWM_MspInit+0x40>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <HAL_TIM_PWM_MspInit+0x40>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CAN2_MspDeInit 1 */
  }

}

 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_TIM_MspPostInit>:
/**
  * @brief TIM_PWM MSP Initialization
  * This function configures the hardware resources used in this example
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  * @param htim_pwm: TIM_PWM handle pointer
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  * @retval None
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <HAL_TIM_MspPostInit+0x68>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d11e      	bne.n	8001e50 <HAL_TIM_MspPostInit+0x60>
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a10      	ldr	r2, [pc, #64]	@ (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

 8001e2e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e32:	60fb      	str	r3, [r7, #12]
    /* USER CODE END TIM1_MspInit 1 */
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]

 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  }
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]

 8001e40:	2301      	movs	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
}
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <HAL_TIM_MspPostInit+0x70>)
 8001e4c:	f001 f958 	bl	8003100 <HAL_GPIO_Init>
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000

08001e64 <HAL_UART_MspInit>:
  * This function freeze the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	@ (8001ee8 <HAL_UART_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12b      	bne.n	8001ede <HAL_UART_MspInit+0x7a>
    /* USER CODE BEGIN TIM1_MspDeInit 0 */

    /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
    /* USER CODE BEGIN TIM1_MspDeInit 1 */
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <HAL_UART_MspInit+0x88>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a17      	ldr	r2, [pc, #92]	@ (8001eec <HAL_UART_MspInit+0x88>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_UART_MspInit+0x88>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    /* USER CODE END TIM1_MspDeInit 1 */
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_UART_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	@ (8001eec <HAL_UART_MspInit+0x88>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <HAL_UART_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
  }

}

/**
 8001ebe:	23c0      	movs	r3, #192	@ 0xc0
 8001ec0:	617b      	str	r3, [r7, #20]
  * @brief UART MSP Initialization
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
  * This function configures the hardware resources used in this example
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  * @param huart: UART handle pointer
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
  * @retval None
 8001ece:	2307      	movs	r3, #7
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  */
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <HAL_UART_MspInit+0x8c>)
 8001eda:	f001 f911 	bl	8003100 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	@ 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40011000 	.word	0x40011000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020400 	.word	0x40020400

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <NMI_Handler+0x4>

08001efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4a:	f000 f891 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <SystemInit+0x20>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <SystemInit+0x20>)
 8001f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <Reset_Handler>:
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb0 <LoopFillZerobss+0xe>
 8001f7c:	f7ff ffea 	bl	8001f54 <SystemInit>
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <LoopFillZerobss+0x12>)
 8001f82:	490d      	ldr	r1, [pc, #52]	@ (8001fb8 <LoopFillZerobss+0x16>)
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <LoopFillZerobss+0x1a>)
 8001f86:	2300      	movs	r3, #0
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:
 8001f8a:	58d4      	ldr	r4, [r2, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:
 8001f90:	18c4      	adds	r4, r0, r3
 8001f92:	428c      	cmp	r4, r1
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <LoopFillZerobss+0x1e>)
 8001f98:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc4 <LoopFillZerobss+0x22>)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:
 8001fa2:	42a2      	cmp	r2, r4
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>
 8001fa6:	f002 fe95 	bl	8004cd4 <__libc_init_array>
 8001faa:	f7ff fab1 	bl	8001510 <main>
 8001fae:	4770      	bx	lr
 8001fb0:	20020000 	.word	0x20020000
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	2000006c 	.word	0x2000006c
 8001fbc:	080051a8 	.word	0x080051a8
 8001fc0:	2000006c 	.word	0x2000006c
 8001fc4:	20000400 	.word	0x20000400

08001fc8 <ADC_IRQHandler>:
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_Init+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <HAL_Init+0x40>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_Init+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <HAL_Init+0x40>)
 8001fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	@ (800200c <HAL_Init+0x40>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f001 f841 	bl	800307c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fd90 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f001 f859 	bl	80030e6 <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f001 f821 	bl	8003092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	@ (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000010 	.word	0x20000010
 8002068:	20000018 	.word	0x20000018
 800206c:	20000014 	.word	0x20000014

08002070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_IncTick+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_IncTick+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <HAL_IncTick+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000018 	.word	0x20000018
 8002094:	200002c4 	.word	0x200002c4

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200002c4 	.word	0x200002c4

080020b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e033      	b.n	800212e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fd50 	bl	8001b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020f6:	f023 0302 	bic.w	r3, r3, #2
 80020fa:	f043 0202 	orr.w	r2, r3, #2
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 faa4 	bl	8002650 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40
 800211e:	e001      	b.n	8002124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Start+0x1a>
 800214e:	2302      	movs	r3, #2
 8002150:	e0b2      	b.n	80022b8 <HAL_ADC_Start+0x180>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d018      	beq.n	800219a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002178:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <HAL_ADC_Start+0x18c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a52      	ldr	r2, [pc, #328]	@ (80022c8 <HAL_ADC_Start+0x190>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9a      	lsrs	r2, r3, #18
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800218c:	e002      	b.n	8002194 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3b01      	subs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d17a      	bne.n	800229e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e6:	d106      	bne.n	80021f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	f023 0206 	bic.w	r2, r3, #6
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80021f4:	e002      	b.n	80021fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002204:	4b31      	ldr	r3, [pc, #196]	@ (80022cc <HAL_ADC_Start+0x194>)
 8002206:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002210:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12a      	bne.n	8002274 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2b      	ldr	r2, [pc, #172]	@ (80022d0 <HAL_ADC_Start+0x198>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d015      	beq.n	8002254 <HAL_ADC_Start+0x11c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a29      	ldr	r2, [pc, #164]	@ (80022d4 <HAL_ADC_Start+0x19c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d105      	bne.n	800223e <HAL_ADC_Start+0x106>
 8002232:	4b26      	ldr	r3, [pc, #152]	@ (80022cc <HAL_ADC_Start+0x194>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a25      	ldr	r2, [pc, #148]	@ (80022d8 <HAL_ADC_Start+0x1a0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d136      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
 8002248:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_ADC_Start+0x194>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d130      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d129      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	e020      	b.n	80022b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a15      	ldr	r2, [pc, #84]	@ (80022d0 <HAL_ADC_Start+0x198>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11b      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d114      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e00b      	b.n	80022b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20000010 	.word	0x20000010
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	40012300 	.word	0x40012300
 80022d0:	40012000 	.word	0x40012000
 80022d4:	40012100 	.word	0x40012100
 80022d8:	40012200 	.word	0x40012200

080022dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f8:	d113      	bne.n	8002322 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002308:	d10b      	bne.n	8002322 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e063      	b.n	80023ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002322:	f7ff feb9 	bl	8002098 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002328:	e021      	b.n	800236e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d01d      	beq.n	800236e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_ADC_PollForConversion+0x6c>
 8002338:	f7ff feae 	bl	8002098 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d212      	bcs.n	800236e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d00b      	beq.n	800236e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f043 0204 	orr.w	r2, r3, #4
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e03d      	b.n	80023ea <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d1d6      	bne.n	800232a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0212 	mvn.w	r2, #18
 8002384:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d123      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11f      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d111      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e105      	b.n	8002634 <HAL_ADC_ConfigChannel+0x228>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b09      	cmp	r3, #9
 8002436:	d925      	bls.n	8002484 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68d9      	ldr	r1, [r3, #12]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3b1e      	subs	r3, #30
 800244e:	2207      	movs	r2, #7
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43da      	mvns	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68d9      	ldr	r1, [r3, #12]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	4618      	mov	r0, r3
 8002470:	4603      	mov	r3, r0
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4403      	add	r3, r0
 8002476:	3b1e      	subs	r3, #30
 8002478:	409a      	lsls	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	e022      	b.n	80024ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	2207      	movs	r2, #7
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6919      	ldr	r1, [r3, #16]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4618      	mov	r0, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4403      	add	r3, r0
 80024c0:	409a      	lsls	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d824      	bhi.n	800251c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b05      	subs	r3, #5
 80024e4:	221f      	movs	r2, #31
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b05      	subs	r3, #5
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	@ 0x34
 800251a:	e04c      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	d824      	bhi.n	800256e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b23      	subs	r3, #35	@ 0x23
 8002536:	221f      	movs	r2, #31
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	4618      	mov	r0, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	3b23      	subs	r3, #35	@ 0x23
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
 800256c:	e023      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b41      	subs	r3, #65	@ 0x41
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b41      	subs	r3, #65	@ 0x41
 80025aa:	fa00 f203 	lsl.w	r2, r0, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <HAL_ADC_ConfigChannel+0x234>)
 80025b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a21      	ldr	r2, [pc, #132]	@ (8002644 <HAL_ADC_ConfigChannel+0x238>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1cc>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	@ (8002644 <HAL_ADC_ConfigChannel+0x238>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d123      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d003      	beq.n	80025f2 <HAL_ADC_ConfigChannel+0x1e6>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b11      	cmp	r3, #17
 80025f0:	d11b      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d111      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_ADC_ConfigChannel+0x23c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_ADC_ConfigChannel+0x240>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	0c9a      	lsrs	r2, r3, #18
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800261c:	e002      	b.n	8002624 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3b01      	subs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	40012000 	.word	0x40012000
 8002648:	20000010 	.word	0x20000010
 800264c:	431bde83 	.word	0x431bde83

08002650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002658:	4b79      	ldr	r3, [pc, #484]	@ (8002840 <ADC_Init+0x1f0>)
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	021a      	lsls	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	4a58      	ldr	r2, [pc, #352]	@ (8002844 <ADC_Init+0x1f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d022      	beq.n	800272e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e00f      	b.n	800274e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800273c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800274c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0202 	bic.w	r2, r2, #2
 800275c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
 8002768:	005a      	lsls	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01b      	beq.n	80027b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800278a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800279a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	3b01      	subs	r3, #1
 80027a8:	035a      	lsls	r2, r3, #13
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e007      	b.n	80027c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80027d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	3b01      	subs	r3, #1
 80027e0:	051a      	lsls	r2, r3, #20
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002806:	025a      	lsls	r2, r3, #9
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800281e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	029a      	lsls	r2, r3, #10
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40012300 	.word	0x40012300
 8002844:	0f000001 	.word	0x0f000001

08002848 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0ed      	b.n	8002a36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fa00 	bl	8001c6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287c:	f7ff fc0c 	bl	8002098 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002882:	e012      	b.n	80028aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002884:	f7ff fc08 	bl	8002098 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b0a      	cmp	r3, #10
 8002890:	d90b      	bls.n	80028aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2205      	movs	r2, #5
 80028a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0c5      	b.n	8002a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0e5      	beq.n	8002884 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0202 	bic.w	r2, r2, #2
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c8:	f7ff fbe6 	bl	8002098 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ce:	e012      	b.n	80028f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028d0:	f7ff fbe2 	bl	8002098 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b0a      	cmp	r3, #10
 80028dc:	d90b      	bls.n	80028f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2205      	movs	r2, #5
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e09f      	b.n	8002a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e5      	bne.n	80028d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7e1b      	ldrb	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d108      	bne.n	800291e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e007      	b.n	800292e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7e5b      	ldrb	r3, [r3, #25]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e007      	b.n	8002958 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002956:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7e9b      	ldrb	r3, [r3, #26]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d108      	bne.n	8002972 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e007      	b.n	8002982 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0220 	bic.w	r2, r2, #32
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7edb      	ldrb	r3, [r3, #27]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0210 	bic.w	r2, r2, #16
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e007      	b.n	80029ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0210 	orr.w	r2, r2, #16
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7f1b      	ldrb	r3, [r3, #28]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d108      	bne.n	80029c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e007      	b.n	80029d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0208 	bic.w	r2, r2, #8
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7f5b      	ldrb	r3, [r3, #29]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0204 	orr.w	r2, r2, #4
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e007      	b.n	8002a00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	ea42 0103 	orr.w	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	1e5a      	subs	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a50:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d003      	beq.n	8002a60 <HAL_CAN_ConfigFilter+0x20>
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	f040 80be 	bne.w	8002bdc <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a60:	4b65      	ldr	r3, [pc, #404]	@ (8002bf8 <HAL_CAN_ConfigFilter+0x1b8>)
 8002a62:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a7a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	431a      	orrs	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d123      	bne.n	8002b0a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	401a      	ands	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ae4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	3248      	adds	r2, #72	@ 0x48
 8002aea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002afe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b00:	6939      	ldr	r1, [r7, #16]
 8002b02:	3348      	adds	r3, #72	@ 0x48
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d122      	bne.n	8002b58 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	3248      	adds	r2, #72	@ 0x48
 8002b38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b4e:	6939      	ldr	r1, [r7, #16]
 8002b50:	3348      	adds	r3, #72	@ 0x48
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002b72:	e007      	b.n	8002b84 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002b9e:	e007      	b.n	8002bb0 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e006      	b.n	8002bea <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40006400 	.word	0x40006400

08002bfc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d12e      	bne.n	8002c6e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c28:	f7ff fa36 	bl	8002098 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c2e:	e012      	b.n	8002c56 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c30:	f7ff fa32 	bl	8002098 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b0a      	cmp	r3, #10
 8002c3c:	d90b      	bls.n	8002c56 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2205      	movs	r2, #5
 8002c4e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e012      	b.n	8002c7c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e5      	bne.n	8002c30 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e006      	b.n	8002c7c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c98:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d003      	beq.n	8002cb0 <HAL_CAN_AddTxMessage+0x2c>
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	f040 80ad 	bne.w	8002e0a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8095 	beq.w	8002dfa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	0e1b      	lsrs	r3, r3, #24
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cda:	2201      	movs	r2, #1
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	6809      	ldr	r1, [r1, #0]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3318      	adds	r3, #24
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	440b      	add	r3, r1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e00f      	b.n	8002d28 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d12:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d1c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3318      	adds	r3, #24
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	440b      	add	r3, r1
 8002d26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3318      	adds	r3, #24
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	440b      	add	r3, r1
 8002d38:	3304      	adds	r3, #4
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	7d1b      	ldrb	r3, [r3, #20]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d111      	bne.n	8002d68 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3318      	adds	r3, #24
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	6811      	ldr	r1, [r2, #0]
 8002d58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3318      	adds	r3, #24
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	440b      	add	r3, r1
 8002d64:	3304      	adds	r3, #4
 8002d66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3307      	adds	r3, #7
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	061a      	lsls	r2, r3, #24
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3306      	adds	r3, #6
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3305      	adds	r3, #5
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	4313      	orrs	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	3204      	adds	r2, #4
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	6811      	ldr	r1, [r2, #0]
 8002d90:	ea43 0200 	orr.w	r2, r3, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002d9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3303      	adds	r3, #3
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	061a      	lsls	r2, r3, #24
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3302      	adds	r3, #2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3301      	adds	r3, #1
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	6811      	ldr	r1, [r2, #0]
 8002dc6:	ea43 0200 	orr.w	r2, r3, r0
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	440b      	add	r3, r1
 8002dd0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002dd4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3318      	adds	r3, #24
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	4413      	add	r3, r2
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6811      	ldr	r1, [r2, #0]
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3318      	adds	r3, #24
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	440b      	add	r3, r1
 8002df4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e00e      	b.n	8002e18 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e006      	b.n	8002e18 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3724      	adds	r7, #36	@ 0x24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e36:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e38:	7afb      	ldrb	r3, [r7, #11]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d002      	beq.n	8002e44 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d11d      	bne.n	8002e80 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3301      	adds	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002e80:	68fb      	ldr	r3, [r7, #12]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e9e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <HAL_CAN_ActivateNotification+0x1e>
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d109      	bne.n	8002ec0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6959      	ldr	r1, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e006      	b.n	8002ece <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4907      	ldr	r1, [pc, #28]	@ (8002f78 <__NVIC_EnableIRQ+0x38>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	@ (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	@ (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	@ 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003048:	d301      	bcc.n	800304e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304e:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <SysTick_Config+0x40>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003056:	210f      	movs	r1, #15
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f7ff ff8e 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <SysTick_Config+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <SysTick_Config+0x40>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff29 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a4:	f7ff ff3e 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff ff8e 	bl	8002fd0 <NVIC_EncodePriority>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff5d 	bl	8002f7c <__NVIC_SetPriority>
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff31 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa2 	bl	8003038 <SysTick_Config>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	@ 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e16b      	b.n	80033f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800311c:	2201      	movs	r2, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	f040 815a 	bne.w	80033ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d005      	beq.n	8003152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800314e:	2b02      	cmp	r3, #2
 8003150:	d130      	bne.n	80031b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2203      	movs	r2, #3
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003188:	2201      	movs	r2, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 0201 	and.w	r2, r3, #1
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d017      	beq.n	80031f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d123      	bne.n	8003244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	69b9      	ldr	r1, [r7, #24]
 8003240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80b4 	beq.w	80033ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b60      	ldr	r3, [pc, #384]	@ (800340c <HAL_GPIO_Init+0x30c>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	4a5f      	ldr	r2, [pc, #380]	@ (800340c <HAL_GPIO_Init+0x30c>)
 8003290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003294:	6453      	str	r3, [r2, #68]	@ 0x44
 8003296:	4b5d      	ldr	r3, [pc, #372]	@ (800340c <HAL_GPIO_Init+0x30c>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003410 <HAL_GPIO_Init+0x310>)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	3302      	adds	r3, #2
 80032aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a52      	ldr	r2, [pc, #328]	@ (8003414 <HAL_GPIO_Init+0x314>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02b      	beq.n	8003326 <HAL_GPIO_Init+0x226>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a51      	ldr	r2, [pc, #324]	@ (8003418 <HAL_GPIO_Init+0x318>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d025      	beq.n	8003322 <HAL_GPIO_Init+0x222>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a50      	ldr	r2, [pc, #320]	@ (800341c <HAL_GPIO_Init+0x31c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <HAL_GPIO_Init+0x21e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003420 <HAL_GPIO_Init+0x320>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d019      	beq.n	800331a <HAL_GPIO_Init+0x21a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003424 <HAL_GPIO_Init+0x324>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0x216>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003428 <HAL_GPIO_Init+0x328>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00d      	beq.n	8003312 <HAL_GPIO_Init+0x212>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4c      	ldr	r2, [pc, #304]	@ (800342c <HAL_GPIO_Init+0x32c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <HAL_GPIO_Init+0x20e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4b      	ldr	r2, [pc, #300]	@ (8003430 <HAL_GPIO_Init+0x330>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_GPIO_Init+0x20a>
 8003306:	2307      	movs	r3, #7
 8003308:	e00e      	b.n	8003328 <HAL_GPIO_Init+0x228>
 800330a:	2308      	movs	r3, #8
 800330c:	e00c      	b.n	8003328 <HAL_GPIO_Init+0x228>
 800330e:	2306      	movs	r3, #6
 8003310:	e00a      	b.n	8003328 <HAL_GPIO_Init+0x228>
 8003312:	2305      	movs	r3, #5
 8003314:	e008      	b.n	8003328 <HAL_GPIO_Init+0x228>
 8003316:	2304      	movs	r3, #4
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x228>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_Init+0x228>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x228>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_Init+0x228>
 8003326:	2300      	movs	r3, #0
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003338:	4935      	ldr	r1, [pc, #212]	@ (8003410 <HAL_GPIO_Init+0x310>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003346:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <HAL_GPIO_Init+0x334>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336a:	4a32      	ldr	r2, [pc, #200]	@ (8003434 <HAL_GPIO_Init+0x334>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003370:	4b30      	ldr	r3, [pc, #192]	@ (8003434 <HAL_GPIO_Init+0x334>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003394:	4a27      	ldr	r2, [pc, #156]	@ (8003434 <HAL_GPIO_Init+0x334>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339a:	4b26      	ldr	r3, [pc, #152]	@ (8003434 <HAL_GPIO_Init+0x334>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033be:	4a1d      	ldr	r2, [pc, #116]	@ (8003434 <HAL_GPIO_Init+0x334>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <HAL_GPIO_Init+0x334>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e8:	4a12      	ldr	r2, [pc, #72]	@ (8003434 <HAL_GPIO_Init+0x334>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	f67f ae90 	bls.w	800311c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3724      	adds	r7, #36	@ 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40021400 	.word	0x40021400
 800342c:	40021800 	.word	0x40021800
 8003430:	40021c00 	.word	0x40021c00
 8003434:	40013c00 	.word	0x40013c00

08003438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e267      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d075      	beq.n	8003542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003456:	4b88      	ldr	r3, [pc, #544]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00c      	beq.n	800347c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b85      	ldr	r3, [pc, #532]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800346a:	2b08      	cmp	r3, #8
 800346c:	d112      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b82      	ldr	r3, [pc, #520]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800347a:	d10b      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b7e      	ldr	r3, [pc, #504]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05b      	beq.n	8003540 <HAL_RCC_OscConfig+0x108>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d157      	bne.n	8003540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e242      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x74>
 800349e:	4b76      	ldr	r3, [pc, #472]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e01d      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x98>
 80034b6:	4b70      	ldr	r3, [pc, #448]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034d0:	4b69      	ldr	r3, [pc, #420]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a68      	ldr	r2, [pc, #416]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b66      	ldr	r3, [pc, #408]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a65      	ldr	r2, [pc, #404]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fdd2 	bl	8002098 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe fdce 	bl	8002098 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e207      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b5b      	ldr	r3, [pc, #364]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0xc0>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fdbe 	bl	8002098 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe fdba 	bl	8002098 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1f3      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	4b51      	ldr	r3, [pc, #324]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0xe8>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d063      	beq.n	8003616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800354e:	4b4a      	ldr	r3, [pc, #296]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003562:	2b08      	cmp	r3, #8
 8003564:	d11c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003566:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d116      	bne.n	80035a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003572:	4b41      	ldr	r3, [pc, #260]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_RCC_OscConfig+0x152>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e1c7      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4937      	ldr	r1, [pc, #220]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359e:	e03a      	b.n	8003616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d020      	beq.n	80035ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a8:	4b34      	ldr	r3, [pc, #208]	@ (800367c <HAL_RCC_OscConfig+0x244>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fe fd73 	bl	8002098 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b6:	f7fe fd6f 	bl	8002098 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e1a8      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d4:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4925      	ldr	r1, [pc, #148]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
 80035e8:	e015      	b.n	8003616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ea:	4b24      	ldr	r3, [pc, #144]	@ (800367c <HAL_RCC_OscConfig+0x244>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fd52 	bl	8002098 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe fd4e 	bl	8002098 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e187      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d036      	beq.n	8003690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	4b15      	ldr	r3, [pc, #84]	@ (8003680 <HAL_RCC_OscConfig+0x248>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fe fd32 	bl	8002098 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003638:	f7fe fd2e 	bl	8002098 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e167      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800364c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x200>
 8003656:	e01b      	b.n	8003690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003658:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_OscConfig+0x248>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fe fd1b 	bl	8002098 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	e00e      	b.n	8003684 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003666:	f7fe fd17 	bl	8002098 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d907      	bls.n	8003684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e150      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
 8003678:	40023800 	.word	0x40023800
 800367c:	42470000 	.word	0x42470000
 8003680:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	4b88      	ldr	r3, [pc, #544]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ea      	bne.n	8003666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8097 	beq.w	80037cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a2:	4b81      	ldr	r3, [pc, #516]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	4b7d      	ldr	r3, [pc, #500]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a7c      	ldr	r2, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036be:	4b7a      	ldr	r3, [pc, #488]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b77      	ldr	r3, [pc, #476]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d118      	bne.n	800370c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036da:	4b74      	ldr	r3, [pc, #464]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a73      	ldr	r2, [pc, #460]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e6:	f7fe fcd7 	bl	8002098 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fe fcd3 	bl	8002098 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e10c      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x2ea>
 8003714:	4b64      	ldr	r3, [pc, #400]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003718:	4a63      	ldr	r2, [pc, #396]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003720:	e01c      	b.n	800375c <HAL_RCC_OscConfig+0x324>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b05      	cmp	r3, #5
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x30c>
 800372a:	4b5f      	ldr	r3, [pc, #380]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	4a5e      	ldr	r2, [pc, #376]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6713      	str	r3, [r2, #112]	@ 0x70
 8003736:	4b5c      	ldr	r3, [pc, #368]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	4a5b      	ldr	r2, [pc, #364]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6713      	str	r3, [r2, #112]	@ 0x70
 8003742:	e00b      	b.n	800375c <HAL_RCC_OscConfig+0x324>
 8003744:	4b58      	ldr	r3, [pc, #352]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a57      	ldr	r2, [pc, #348]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003750:	4b55      	ldr	r3, [pc, #340]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	4a54      	ldr	r2, [pc, #336]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003756:	f023 0304 	bic.w	r3, r3, #4
 800375a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d015      	beq.n	8003790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fe fc98 	bl	8002098 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fe fc94 	bl	8002098 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0cb      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003782:	4b49      	ldr	r3, [pc, #292]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ee      	beq.n	800376c <HAL_RCC_OscConfig+0x334>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003790:	f7fe fc82 	bl	8002098 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fe fc7e 	bl	8002098 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0b5      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ae:	4b3e      	ldr	r3, [pc, #248]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ee      	bne.n	8003798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c0:	4b39      	ldr	r3, [pc, #228]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	4a38      	ldr	r2, [pc, #224]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a1 	beq.w	8003918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d6:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d05c      	beq.n	800389c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d141      	bne.n	800386e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe fc52 	bl	8002098 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe fc4e 	bl	8002098 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e087      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b27      	ldr	r3, [pc, #156]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	491b      	ldr	r1, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fe fc27 	bl	8002098 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe fc23 	bl	8002098 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e05c      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003860:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x416>
 800386c:	e054      	b.n	8003918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe fc10 	bl	8002098 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fe fc0c 	bl	8002098 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e045      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x444>
 800389a:	e03d      	b.n	8003918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e038      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40007000 	.word	0x40007000
 80038b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_RCC_OscConfig+0x4ec>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d028      	beq.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d121      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11a      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d111      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0cc      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b68      	ldr	r3, [pc, #416]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d90c      	bls.n	8003964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b65      	ldr	r3, [pc, #404]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b63      	ldr	r3, [pc, #396]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a58      	ldr	r2, [pc, #352]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003994:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a52      	ldr	r2, [pc, #328]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800399e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	494d      	ldr	r1, [pc, #308]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d044      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d119      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e067      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4934      	ldr	r1, [pc, #208]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a18:	f7fe fb3e 	bl	8002098 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7fe fb3a 	bl	8002098 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 020c 	and.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1eb      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d20c      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b22      	ldr	r3, [pc, #136]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e032      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4916      	ldr	r1, [pc, #88]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	490e      	ldr	r1, [pc, #56]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aae:	f000 f821 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fa9e 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08005150 	.word	0x08005150
 8003aec:	20000010 	.word	0x20000010
 8003af0:	20000014 	.word	0x20000014

08003af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b090      	sub	sp, #64	@ 0x40
 8003afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0c:	4b59      	ldr	r3, [pc, #356]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d00d      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x40>
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	f200 80a1 	bhi.w	8003c60 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x34>
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b26:	e09b      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b2c:	e09b      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2e:	4b53      	ldr	r3, [pc, #332]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b32:	e098      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b34:	4b4f      	ldr	r3, [pc, #316]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d028      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	2200      	movs	r2, #0
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b60:	fb03 f201 	mul.w	r2, r3, r1
 8003b64:	2300      	movs	r3, #0
 8003b66:	fb00 f303 	mul.w	r3, r0, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a43      	ldr	r2, [pc, #268]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b6e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b74:	460a      	mov	r2, r1
 8003b76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b7a:	4413      	add	r3, r2
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b80:	2200      	movs	r2, #0
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	61fa      	str	r2, [r7, #28]
 8003b86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b8e:	f7fc ffe9 	bl	8000b64 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4613      	mov	r3, r2
 8003b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b9a:	e053      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9c:	4b35      	ldr	r3, [pc, #212]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	617a      	str	r2, [r7, #20]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bae:	f04f 0b00 	mov.w	fp, #0
 8003bb2:	4652      	mov	r2, sl
 8003bb4:	465b      	mov	r3, fp
 8003bb6:	f04f 0000 	mov.w	r0, #0
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	0159      	lsls	r1, r3, #5
 8003bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc4:	0150      	lsls	r0, r2, #5
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	ebb2 080a 	subs.w	r8, r2, sl
 8003bce:	eb63 090b 	sbc.w	r9, r3, fp
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003be2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003be6:	ebb2 0408 	subs.w	r4, r2, r8
 8003bea:	eb63 0509 	sbc.w	r5, r3, r9
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	00eb      	lsls	r3, r5, #3
 8003bf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfc:	00e2      	lsls	r2, r4, #3
 8003bfe:	4614      	mov	r4, r2
 8003c00:	461d      	mov	r5, r3
 8003c02:	eb14 030a 	adds.w	r3, r4, sl
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	eb45 030b 	adc.w	r3, r5, fp
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	028b      	lsls	r3, r1, #10
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c24:	4621      	mov	r1, r4
 8003c26:	028a      	lsls	r2, r1, #10
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	60fa      	str	r2, [r7, #12]
 8003c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c38:	f7fc ff94 	bl	8000b64 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3740      	adds	r7, #64	@ 0x40
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	017d7840 	.word	0x017d7840

08003c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c84:	4b03      	ldr	r3, [pc, #12]	@ (8003c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000010 	.word	0x20000010

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c9c:	f7ff fff0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a9b      	lsrs	r3, r3, #10
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4903      	ldr	r1, [pc, #12]	@ (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	08005160 	.word	0x08005160

08003cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc4:	f7ff ffdc 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0b5b      	lsrs	r3, r3, #13
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	@ (8003ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	08005160 	.word	0x08005160

08003ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e041      	b.n	8003d7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe f84c 	bl	8001dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 f9b8 	bl	800409c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_TIM_PWM_Start+0x24>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e022      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d109      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x3e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e015      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d109      	bne.n	8003de0 <HAL_TIM_PWM_Start+0x58>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e008      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07c      	b.n	8003ef4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x82>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e08:	e013      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x92>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e18:	e00b      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0xa2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e28:	e003      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fb84 	bl	8004548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <HAL_TIM_PWM_Start+0x174>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <HAL_TIM_PWM_Start+0x178>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_PWM_Start+0xd0>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_TIM_PWM_Start+0xd2>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a22      	ldr	r2, [pc, #136]	@ (8003efc <HAL_TIM_PWM_Start+0x174>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d022      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x136>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e80:	d01d      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x136>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1f      	ldr	r2, [pc, #124]	@ (8003f04 <HAL_TIM_PWM_Start+0x17c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d018      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x136>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_TIM_PWM_Start+0x180>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x136>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_TIM_PWM_Start+0x184>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x136>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <HAL_TIM_PWM_Start+0x178>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x136>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a18      	ldr	r2, [pc, #96]	@ (8003f10 <HAL_TIM_PWM_Start+0x188>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x136>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a16      	ldr	r2, [pc, #88]	@ (8003f14 <HAL_TIM_PWM_Start+0x18c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d111      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b06      	cmp	r3, #6
 8003ece:	d010      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee0:	e007      	b.n	8003ef2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40001800 	.word	0x40001800

08003f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0ae      	b.n	8004094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	f200 809f 	bhi.w	8004084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f46:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08004085 	.word	0x08004085
 8003f54:	08004085 	.word	0x08004085
 8003f58:	08004085 	.word	0x08004085
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	08004085 	.word	0x08004085
 8003f64:	08004085 	.word	0x08004085
 8003f68:	08004085 	.word	0x08004085
 8003f6c:	08004003 	.word	0x08004003
 8003f70:	08004085 	.word	0x08004085
 8003f74:	08004085 	.word	0x08004085
 8003f78:	08004085 	.word	0x08004085
 8003f7c:	08004043 	.word	0x08004043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f92e 	bl	80041e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0204 	bic.w	r2, r2, #4
 8003faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6999      	ldr	r1, [r3, #24]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	619a      	str	r2, [r3, #24]
      break;
 8003fbe:	e064      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f97e 	bl	80042c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6999      	ldr	r1, [r3, #24]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	021a      	lsls	r2, r3, #8
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
      break;
 8004000:	e043      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9d3 	bl	80043b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0208 	orr.w	r2, r2, #8
 800401c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0204 	bic.w	r2, r2, #4
 800402c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69d9      	ldr	r1, [r3, #28]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	61da      	str	r2, [r3, #28]
      break;
 8004040:	e023      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa27 	bl	800449c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800405c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69d9      	ldr	r1, [r3, #28]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	021a      	lsls	r2, r3, #8
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	61da      	str	r2, [r3, #28]
      break;
 8004082:	e002      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	75fb      	strb	r3, [r7, #23]
      break;
 8004088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a43      	ldr	r2, [pc, #268]	@ (80041bc <TIM_Base_SetConfig+0x120>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d00f      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a40      	ldr	r2, [pc, #256]	@ (80041c0 <TIM_Base_SetConfig+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a3f      	ldr	r2, [pc, #252]	@ (80041c4 <TIM_Base_SetConfig+0x128>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a3e      	ldr	r2, [pc, #248]	@ (80041c8 <TIM_Base_SetConfig+0x12c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3d      	ldr	r2, [pc, #244]	@ (80041cc <TIM_Base_SetConfig+0x130>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a32      	ldr	r2, [pc, #200]	@ (80041bc <TIM_Base_SetConfig+0x120>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fc:	d027      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2f      	ldr	r2, [pc, #188]	@ (80041c0 <TIM_Base_SetConfig+0x124>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d023      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2e      	ldr	r2, [pc, #184]	@ (80041c4 <TIM_Base_SetConfig+0x128>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2d      	ldr	r2, [pc, #180]	@ (80041c8 <TIM_Base_SetConfig+0x12c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2c      	ldr	r2, [pc, #176]	@ (80041cc <TIM_Base_SetConfig+0x130>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d017      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2b      	ldr	r2, [pc, #172]	@ (80041d0 <TIM_Base_SetConfig+0x134>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2a      	ldr	r2, [pc, #168]	@ (80041d4 <TIM_Base_SetConfig+0x138>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00f      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a29      	ldr	r2, [pc, #164]	@ (80041d8 <TIM_Base_SetConfig+0x13c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a28      	ldr	r2, [pc, #160]	@ (80041dc <TIM_Base_SetConfig+0x140>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <TIM_Base_SetConfig+0x144>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <TIM_Base_SetConfig+0x148>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a0e      	ldr	r2, [pc, #56]	@ (80041bc <TIM_Base_SetConfig+0x120>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0xf2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a10      	ldr	r2, [pc, #64]	@ (80041cc <TIM_Base_SetConfig+0x130>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d103      	bne.n	8004196 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f043 0204 	orr.w	r2, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	601a      	str	r2, [r3, #0]
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40014400 	.word	0x40014400
 80041d8:	40014800 	.word	0x40014800
 80041dc:	40001800 	.word	0x40001800
 80041e0:	40001c00 	.word	0x40001c00
 80041e4:	40002000 	.word	0x40002000

080041e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 0201 	bic.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 0302 	bic.w	r3, r3, #2
 8004230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a20      	ldr	r2, [pc, #128]	@ (80042c0 <TIM_OC1_SetConfig+0xd8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC1_SetConfig+0x64>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a1f      	ldr	r2, [pc, #124]	@ (80042c4 <TIM_OC1_SetConfig+0xdc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10c      	bne.n	8004266 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 0308 	bic.w	r3, r3, #8
 8004252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a15      	ldr	r2, [pc, #84]	@ (80042c0 <TIM_OC1_SetConfig+0xd8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC1_SetConfig+0x8e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <TIM_OC1_SetConfig+0xdc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d111      	bne.n	800429a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	621a      	str	r2, [r3, #32]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40010400 	.word	0x40010400

080042c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f023 0210 	bic.w	r2, r3, #16
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 0320 	bic.w	r3, r3, #32
 8004312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a22      	ldr	r2, [pc, #136]	@ (80043ac <TIM_OC2_SetConfig+0xe4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_OC2_SetConfig+0x68>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a21      	ldr	r2, [pc, #132]	@ (80043b0 <TIM_OC2_SetConfig+0xe8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10d      	bne.n	800434c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800434a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a17      	ldr	r2, [pc, #92]	@ (80043ac <TIM_OC2_SetConfig+0xe4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_OC2_SetConfig+0x94>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a16      	ldr	r2, [pc, #88]	@ (80043b0 <TIM_OC2_SetConfig+0xe8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d113      	bne.n	8004384 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800436a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40010400 	.word	0x40010400

080043b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0303 	bic.w	r3, r3, #3
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a21      	ldr	r2, [pc, #132]	@ (8004494 <TIM_OC3_SetConfig+0xe0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_OC3_SetConfig+0x66>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <TIM_OC3_SetConfig+0xe4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10d      	bne.n	8004436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a16      	ldr	r2, [pc, #88]	@ (8004494 <TIM_OC3_SetConfig+0xe0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_OC3_SetConfig+0x92>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <TIM_OC3_SetConfig+0xe4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d113      	bne.n	800446e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800444c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40010000 	.word	0x40010000
 8004498:	40010400 	.word	0x40010400

0800449c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a12      	ldr	r2, [pc, #72]	@ (8004540 <TIM_OC4_SetConfig+0xa4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC4_SetConfig+0x68>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a11      	ldr	r2, [pc, #68]	@ (8004544 <TIM_OC4_SetConfig+0xa8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d109      	bne.n	8004518 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800450a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	019b      	lsls	r3, r3, #6
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400

08004548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2201      	movs	r2, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1a      	ldr	r2, [r3, #32]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e05a      	b.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f8:	d01d      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a15      	ldr	r2, [pc, #84]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10c      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	4313      	orrs	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40001800 	.word	0x40001800

0800468c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e03d      	b.n	8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e042      	b.n	80047c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd fb84 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	@ 0x24
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f82b 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b0c0      	sub	sp, #256	@ 0x100
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	68d9      	ldr	r1, [r3, #12]
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	ea40 0301 	orr.w	r3, r0, r1
 80047f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	431a      	orrs	r2, r3
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004828:	f021 010c 	bic.w	r1, r1, #12
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004836:	430b      	orrs	r3, r1
 8004838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	6999      	ldr	r1, [r3, #24]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	ea40 0301 	orr.w	r3, r0, r1
 8004856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8f      	ldr	r3, [pc, #572]	@ (8004a9c <UART_SetConfig+0x2cc>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d005      	beq.n	8004870 <UART_SetConfig+0xa0>
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa0 <UART_SetConfig+0x2d0>)
 800486c:	429a      	cmp	r2, r3
 800486e:	d104      	bne.n	800487a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7ff fa26 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 8004874:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004878:	e003      	b.n	8004882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487a:	f7ff fa0d 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 800487e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488c:	f040 810c 	bne.w	8004aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800489a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800489e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	1891      	adds	r1, r2, r2
 80048a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048aa:	415b      	adcs	r3, r3
 80048ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048b2:	4621      	mov	r1, r4
 80048b4:	eb12 0801 	adds.w	r8, r2, r1
 80048b8:	4629      	mov	r1, r5
 80048ba:	eb43 0901 	adc.w	r9, r3, r1
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d2:	4690      	mov	r8, r2
 80048d4:	4699      	mov	r9, r3
 80048d6:	4623      	mov	r3, r4
 80048d8:	eb18 0303 	adds.w	r3, r8, r3
 80048dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048e0:	462b      	mov	r3, r5
 80048e2:	eb49 0303 	adc.w	r3, r9, r3
 80048e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048fe:	460b      	mov	r3, r1
 8004900:	18db      	adds	r3, r3, r3
 8004902:	653b      	str	r3, [r7, #80]	@ 0x50
 8004904:	4613      	mov	r3, r2
 8004906:	eb42 0303 	adc.w	r3, r2, r3
 800490a:	657b      	str	r3, [r7, #84]	@ 0x54
 800490c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004914:	f7fc f926 	bl	8000b64 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4b61      	ldr	r3, [pc, #388]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 800491e:	fba3 2302 	umull	r2, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	011c      	lsls	r4, r3, #4
 8004926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004930:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004940:	415b      	adcs	r3, r3
 8004942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004948:	4641      	mov	r1, r8
 800494a:	eb12 0a01 	adds.w	sl, r2, r1
 800494e:	4649      	mov	r1, r9
 8004950:	eb43 0b01 	adc.w	fp, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004968:	4692      	mov	sl, r2
 800496a:	469b      	mov	fp, r3
 800496c:	4643      	mov	r3, r8
 800496e:	eb1a 0303 	adds.w	r3, sl, r3
 8004972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004976:	464b      	mov	r3, r9
 8004978:	eb4b 0303 	adc.w	r3, fp, r3
 800497c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800498c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004994:	460b      	mov	r3, r1
 8004996:	18db      	adds	r3, r3, r3
 8004998:	643b      	str	r3, [r7, #64]	@ 0x40
 800499a:	4613      	mov	r3, r2
 800499c:	eb42 0303 	adc.w	r3, r2, r3
 80049a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049aa:	f7fc f8db 	bl	8000b64 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 80049b6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2264      	movs	r2, #100	@ 0x64
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	1acb      	subs	r3, r1, r3
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049ca:	4b36      	ldr	r3, [pc, #216]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 80049cc:	fba3 2302 	umull	r2, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049d8:	441c      	add	r4, r3
 80049da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049ec:	4642      	mov	r2, r8
 80049ee:	464b      	mov	r3, r9
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049f4:	415b      	adcs	r3, r3
 80049f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049fc:	4641      	mov	r1, r8
 80049fe:	1851      	adds	r1, r2, r1
 8004a00:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a02:	4649      	mov	r1, r9
 8004a04:	414b      	adcs	r3, r1
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a14:	4659      	mov	r1, fp
 8004a16:	00cb      	lsls	r3, r1, #3
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1e:	4651      	mov	r1, sl
 8004a20:	00ca      	lsls	r2, r1, #3
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a30:	464b      	mov	r3, r9
 8004a32:	460a      	mov	r2, r1
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a50:	460b      	mov	r3, r1
 8004a52:	18db      	adds	r3, r3, r3
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a56:	4613      	mov	r3, r2
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a66:	f7fc f87d 	bl	8000b64 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 8004a70:	fba3 1302 	umull	r1, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2164      	movs	r1, #100	@ 0x64
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	3332      	adds	r3, #50	@ 0x32
 8004a82:	4a08      	ldr	r2, [pc, #32]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 0207 	and.w	r2, r3, #7
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4422      	add	r2, r4
 8004a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a98:	e106      	b.n	8004ca8 <UART_SetConfig+0x4d8>
 8004a9a:	bf00      	nop
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	40011400 	.word	0x40011400
 8004aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aba:	4642      	mov	r2, r8
 8004abc:	464b      	mov	r3, r9
 8004abe:	1891      	adds	r1, r2, r2
 8004ac0:	6239      	str	r1, [r7, #32]
 8004ac2:	415b      	adcs	r3, r3
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aca:	4641      	mov	r1, r8
 8004acc:	1854      	adds	r4, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb43 0501 	adc.w	r5, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	00eb      	lsls	r3, r5, #3
 8004ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae2:	00e2      	lsls	r2, r4, #3
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	4643      	mov	r3, r8
 8004aea:	18e3      	adds	r3, r4, r3
 8004aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af0:	464b      	mov	r3, r9
 8004af2:	eb45 0303 	adc.w	r3, r5, r3
 8004af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b16:	4629      	mov	r1, r5
 8004b18:	008b      	lsls	r3, r1, #2
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b20:	4621      	mov	r1, r4
 8004b22:	008a      	lsls	r2, r1, #2
 8004b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b28:	f7fc f81c 	bl	8000b64 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4b60      	ldr	r3, [pc, #384]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004b32:	fba3 2302 	umull	r2, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	011c      	lsls	r4, r3, #4
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	61b9      	str	r1, [r7, #24]
 8004b54:	415b      	adcs	r3, r3
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	1851      	adds	r1, r2, r1
 8004b60:	6139      	str	r1, [r7, #16]
 8004b62:	4649      	mov	r1, r9
 8004b64:	414b      	adcs	r3, r1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b74:	4659      	mov	r1, fp
 8004b76:	00cb      	lsls	r3, r1, #3
 8004b78:	4651      	mov	r1, sl
 8004b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7e:	4651      	mov	r1, sl
 8004b80:	00ca      	lsls	r2, r1, #3
 8004b82:	4610      	mov	r0, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	4642      	mov	r2, r8
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b90:	464b      	mov	r3, r9
 8004b92:	460a      	mov	r2, r1
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ba6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	008b      	lsls	r3, r1, #2
 8004bb8:	4641      	mov	r1, r8
 8004bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	008a      	lsls	r2, r1, #2
 8004bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bc6:	f7fb ffcd 	bl	8000b64 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4b38      	ldr	r3, [pc, #224]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	@ 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1acb      	subs	r3, r1, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	@ 0x32
 8004be4:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	1891      	adds	r1, r2, r2
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	415b      	adcs	r3, r3
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c10:	4641      	mov	r1, r8
 8004c12:	1851      	adds	r1, r2, r1
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	4649      	mov	r1, r9
 8004c18:	414b      	adcs	r3, r1
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c28:	4659      	mov	r1, fp
 8004c2a:	00cb      	lsls	r3, r1, #3
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c32:	4651      	mov	r1, sl
 8004c34:	00ca      	lsls	r2, r1, #3
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	189b      	adds	r3, r3, r2
 8004c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c42:	464b      	mov	r3, r9
 8004c44:	460a      	mov	r2, r1
 8004c46:	eb42 0303 	adc.w	r3, r2, r3
 8004c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c56:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c64:	4649      	mov	r1, r9
 8004c66:	008b      	lsls	r3, r1, #2
 8004c68:	4641      	mov	r1, r8
 8004c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6e:	4641      	mov	r1, r8
 8004c70:	008a      	lsls	r2, r1, #2
 8004c72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c76:	f7fb ff75 	bl	8000b64 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	@ 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	3332      	adds	r3, #50	@ 0x32
 8004c92:	4a08      	ldr	r2, [pc, #32]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	f003 020f 	and.w	r2, r3, #15
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4422      	add	r2, r4
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb4:	51eb851f 	.word	0x51eb851f

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	@ (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000001c 	.word	0x2000001c

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 fa26 	bl	8005138 <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	080051a0 	.word	0x080051a0
 8004d10:	080051a0 	.word	0x080051a0
 8004d14:	080051a0 	.word	0x080051a0
 8004d18:	080051a4 	.word	0x080051a4
 8004d1c:	00000000 	.word	0x00000000

08004d20 <exp>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	ed2d 8b02 	vpush	{d8}
 8004d26:	ec55 4b10 	vmov	r4, r5, d0
 8004d2a:	f000 f84d 	bl	8004dc8 <__ieee754_exp>
 8004d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d32:	eef0 8a60 	vmov.f32	s17, s1
 8004d36:	ec45 4b10 	vmov	d0, r4, r5
 8004d3a:	f000 f839 	bl	8004db0 <finite>
 8004d3e:	b168      	cbz	r0, 8004d5c <exp+0x3c>
 8004d40:	a317      	add	r3, pc, #92	@ (adr r3, 8004da0 <exp+0x80>)
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fe89 	bl	8000a60 <__aeabi_dcmpgt>
 8004d4e:	b160      	cbz	r0, 8004d6a <exp+0x4a>
 8004d50:	f7ff ffba 	bl	8004cc8 <__errno>
 8004d54:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8004d90 <exp+0x70>
 8004d58:	2322      	movs	r3, #34	@ 0x22
 8004d5a:	6003      	str	r3, [r0, #0]
 8004d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8004d60:	eef0 0a68 	vmov.f32	s1, s17
 8004d64:	ecbd 8b02 	vpop	{d8}
 8004d68:	bd38      	pop	{r3, r4, r5, pc}
 8004d6a:	a30f      	add	r3, pc, #60	@ (adr r3, 8004da8 <exp+0x88>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	4620      	mov	r0, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb fe56 	bl	8000a24 <__aeabi_dcmplt>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d0ef      	beq.n	8004d5c <exp+0x3c>
 8004d7c:	f7ff ffa4 	bl	8004cc8 <__errno>
 8004d80:	2322      	movs	r3, #34	@ 0x22
 8004d82:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8004d98 <exp+0x78>
 8004d86:	6003      	str	r3, [r0, #0]
 8004d88:	e7e8      	b.n	8004d5c <exp+0x3c>
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w
 8004d90:	00000000 	.word	0x00000000
 8004d94:	7ff00000 	.word	0x7ff00000
	...
 8004da0:	fefa39ef 	.word	0xfefa39ef
 8004da4:	40862e42 	.word	0x40862e42
 8004da8:	d52d3051 	.word	0xd52d3051
 8004dac:	c0874910 	.word	0xc0874910

08004db0 <finite>:
 8004db0:	b082      	sub	sp, #8
 8004db2:	ed8d 0b00 	vstr	d0, [sp]
 8004db6:	9801      	ldr	r0, [sp, #4]
 8004db8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004dbc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004dc0:	0fc0      	lsrs	r0, r0, #31
 8004dc2:	b002      	add	sp, #8
 8004dc4:	4770      	bx	lr
	...

08004dc8 <__ieee754_exp>:
 8004dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	ec55 4b10 	vmov	r4, r5, d0
 8004dd0:	49b1      	ldr	r1, [pc, #708]	@ (8005098 <__ieee754_exp+0x2d0>)
 8004dd2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004dd6:	428a      	cmp	r2, r1
 8004dd8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8004ddc:	d936      	bls.n	8004e4c <__ieee754_exp+0x84>
 8004dde:	49af      	ldr	r1, [pc, #700]	@ (800509c <__ieee754_exp+0x2d4>)
 8004de0:	428a      	cmp	r2, r1
 8004de2:	d914      	bls.n	8004e0e <__ieee754_exp+0x46>
 8004de4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004de8:	4323      	orrs	r3, r4
 8004dea:	4622      	mov	r2, r4
 8004dec:	d007      	beq.n	8004dfe <__ieee754_exp+0x36>
 8004dee:	462b      	mov	r3, r5
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb f9ee 	bl	80001d4 <__adddf3>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	460d      	mov	r5, r1
 8004dfc:	e002      	b.n	8004e04 <__ieee754_exp+0x3c>
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	f040 8118 	bne.w	8005034 <__ieee754_exp+0x26c>
 8004e04:	ec45 4b10 	vmov	d0, r4, r5
 8004e08:	b004      	add	sp, #16
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005040 <__ieee754_exp+0x278>)
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fe22 	bl	8000a60 <__aeabi_dcmpgt>
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	b128      	cbz	r0, 8004e2c <__ieee754_exp+0x64>
 8004e20:	2000      	movs	r0, #0
 8004e22:	b004      	add	sp, #16
 8004e24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	f000 b97e 	b.w	8005128 <__math_oflow>
 8004e2c:	a386      	add	r3, pc, #536	@ (adr r3, 8005048 <__ieee754_exp+0x280>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fdf5 	bl	8000a24 <__aeabi_dcmplt>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	f000 8087 	beq.w	8004f4e <__ieee754_exp+0x186>
 8004e40:	4638      	mov	r0, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	f000 b966 	b.w	8005118 <__math_uflow>
 8004e4c:	4b94      	ldr	r3, [pc, #592]	@ (80050a0 <__ieee754_exp+0x2d8>)
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	f240 80a9 	bls.w	8004fa6 <__ieee754_exp+0x1de>
 8004e54:	4b93      	ldr	r3, [pc, #588]	@ (80050a4 <__ieee754_exp+0x2dc>)
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d879      	bhi.n	8004f4e <__ieee754_exp+0x186>
 8004e5a:	4b93      	ldr	r3, [pc, #588]	@ (80050a8 <__ieee754_exp+0x2e0>)
 8004e5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb f9b2 	bl	80001d0 <__aeabi_dsub>
 8004e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80050ac <__ieee754_exp+0x2e4>)
 8004e6e:	00f7      	lsls	r7, r6, #3
 8004e70:	443b      	add	r3, r7
 8004e72:	ed93 7b00 	vldr	d7, [r3]
 8004e76:	ed8d 7b00 	vstr	d7, [sp]
 8004e7a:	f086 0a01 	eor.w	sl, r6, #1
 8004e7e:	4680      	mov	r8, r0
 8004e80:	4689      	mov	r9, r1
 8004e82:	ebaa 0a06 	sub.w	sl, sl, r6
 8004e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f7fb f99f 	bl	80001d0 <__aeabi_dsub>
 8004e92:	4604      	mov	r4, r0
 8004e94:	460d      	mov	r5, r1
 8004e96:	4622      	mov	r2, r4
 8004e98:	462b      	mov	r3, r5
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f7fb fb4f 	bl	8000540 <__aeabi_dmul>
 8004ea2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005050 <__ieee754_exp+0x288>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	f7fb fb48 	bl	8000540 <__aeabi_dmul>
 8004eb0:	a369      	add	r3, pc, #420	@ (adr r3, 8005058 <__ieee754_exp+0x290>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb f98b 	bl	80001d0 <__aeabi_dsub>
 8004eba:	4632      	mov	r2, r6
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	f7fb fb3f 	bl	8000540 <__aeabi_dmul>
 8004ec2:	a367      	add	r3, pc, #412	@ (adr r3, 8005060 <__ieee754_exp+0x298>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb f984 	bl	80001d4 <__adddf3>
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	f7fb fb36 	bl	8000540 <__aeabi_dmul>
 8004ed4:	a364      	add	r3, pc, #400	@ (adr r3, 8005068 <__ieee754_exp+0x2a0>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb f979 	bl	80001d0 <__aeabi_dsub>
 8004ede:	4632      	mov	r2, r6
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	f7fb fb2d 	bl	8000540 <__aeabi_dmul>
 8004ee6:	a362      	add	r3, pc, #392	@ (adr r3, 8005070 <__ieee754_exp+0x2a8>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb f972 	bl	80001d4 <__adddf3>
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	f7fb fb24 	bl	8000540 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4620      	mov	r0, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	f7fb f966 	bl	80001d0 <__aeabi_dsub>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4606      	mov	r6, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb fb16 	bl	8000540 <__aeabi_dmul>
 8004f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f18:	f1ba 0f00 	cmp.w	sl, #0
 8004f1c:	d15c      	bne.n	8004fd8 <__ieee754_exp+0x210>
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f24:	4630      	mov	r0, r6
 8004f26:	4639      	mov	r1, r7
 8004f28:	f7fb f952 	bl	80001d0 <__aeabi_dsub>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f34:	f7fb fc2e 	bl	8000794 <__aeabi_ddiv>
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	f7fb f948 	bl	80001d0 <__aeabi_dsub>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	2000      	movs	r0, #0
 8004f46:	495a      	ldr	r1, [pc, #360]	@ (80050b0 <__ieee754_exp+0x2e8>)
 8004f48:	f7fb f942 	bl	80001d0 <__aeabi_dsub>
 8004f4c:	e754      	b.n	8004df8 <__ieee754_exp+0x30>
 8004f4e:	4b59      	ldr	r3, [pc, #356]	@ (80050b4 <__ieee754_exp+0x2ec>)
 8004f50:	4620      	mov	r0, r4
 8004f52:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004f56:	4629      	mov	r1, r5
 8004f58:	a347      	add	r3, pc, #284	@ (adr r3, 8005078 <__ieee754_exp+0x2b0>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb faef 	bl	8000540 <__aeabi_dmul>
 8004f62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f66:	f7fb f935 	bl	80001d4 <__adddf3>
 8004f6a:	f7fb fd83 	bl	8000a74 <__aeabi_d2iz>
 8004f6e:	4682      	mov	sl, r0
 8004f70:	f7fb fa7c 	bl	800046c <__aeabi_i2d>
 8004f74:	a342      	add	r3, pc, #264	@ (adr r3, 8005080 <__ieee754_exp+0x2b8>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	460f      	mov	r7, r1
 8004f7e:	f7fb fadf 	bl	8000540 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4620      	mov	r0, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f7fb f921 	bl	80001d0 <__aeabi_dsub>
 8004f8e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005088 <__ieee754_exp+0x2c0>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	4680      	mov	r8, r0
 8004f96:	4689      	mov	r9, r1
 8004f98:	4630      	mov	r0, r6
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f7fb fad0 	bl	8000540 <__aeabi_dmul>
 8004fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa4:	e76f      	b.n	8004e86 <__ieee754_exp+0xbe>
 8004fa6:	4b44      	ldr	r3, [pc, #272]	@ (80050b8 <__ieee754_exp+0x2f0>)
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d810      	bhi.n	8004fce <__ieee754_exp+0x206>
 8004fac:	a338      	add	r3, pc, #224	@ (adr r3, 8005090 <__ieee754_exp+0x2c8>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	f7fb f90d 	bl	80001d4 <__adddf3>
 8004fba:	4b3d      	ldr	r3, [pc, #244]	@ (80050b0 <__ieee754_exp+0x2e8>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f7fb fd4f 	bl	8000a60 <__aeabi_dcmpgt>
 8004fc2:	b138      	cbz	r0, 8004fd4 <__ieee754_exp+0x20c>
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80050b0 <__ieee754_exp+0x2e8>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4620      	mov	r0, r4
 8004fca:	4629      	mov	r1, r5
 8004fcc:	e712      	b.n	8004df4 <__ieee754_exp+0x2c>
 8004fce:	f04f 0a00 	mov.w	sl, #0
 8004fd2:	e760      	b.n	8004e96 <__ieee754_exp+0xce>
 8004fd4:	4682      	mov	sl, r0
 8004fd6:	e75e      	b.n	8004e96 <__ieee754_exp+0xce>
 8004fd8:	4632      	mov	r2, r6
 8004fda:	463b      	mov	r3, r7
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004fe2:	f7fb f8f5 	bl	80001d0 <__aeabi_dsub>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fee:	f7fb fbd1 	bl	8000794 <__aeabi_ddiv>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ffa:	f7fb f8e9 	bl	80001d0 <__aeabi_dsub>
 8004ffe:	4642      	mov	r2, r8
 8005000:	464b      	mov	r3, r9
 8005002:	f7fb f8e5 	bl	80001d0 <__aeabi_dsub>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	2000      	movs	r0, #0
 800500c:	4928      	ldr	r1, [pc, #160]	@ (80050b0 <__ieee754_exp+0x2e8>)
 800500e:	f7fb f8df 	bl	80001d0 <__aeabi_dsub>
 8005012:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8005016:	4592      	cmp	sl, r2
 8005018:	db02      	blt.n	8005020 <__ieee754_exp+0x258>
 800501a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800501e:	e6eb      	b.n	8004df8 <__ieee754_exp+0x30>
 8005020:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8005024:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005028:	2200      	movs	r2, #0
 800502a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800502e:	f7fb fa87 	bl	8000540 <__aeabi_dmul>
 8005032:	e6e1      	b.n	8004df8 <__ieee754_exp+0x30>
 8005034:	2400      	movs	r4, #0
 8005036:	2500      	movs	r5, #0
 8005038:	e6e4      	b.n	8004e04 <__ieee754_exp+0x3c>
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w
 8005040:	fefa39ef 	.word	0xfefa39ef
 8005044:	40862e42 	.word	0x40862e42
 8005048:	d52d3051 	.word	0xd52d3051
 800504c:	c0874910 	.word	0xc0874910
 8005050:	72bea4d0 	.word	0x72bea4d0
 8005054:	3e663769 	.word	0x3e663769
 8005058:	c5d26bf1 	.word	0xc5d26bf1
 800505c:	3ebbbd41 	.word	0x3ebbbd41
 8005060:	af25de2c 	.word	0xaf25de2c
 8005064:	3f11566a 	.word	0x3f11566a
 8005068:	16bebd93 	.word	0x16bebd93
 800506c:	3f66c16c 	.word	0x3f66c16c
 8005070:	5555553e 	.word	0x5555553e
 8005074:	3fc55555 	.word	0x3fc55555
 8005078:	652b82fe 	.word	0x652b82fe
 800507c:	3ff71547 	.word	0x3ff71547
 8005080:	fee00000 	.word	0xfee00000
 8005084:	3fe62e42 	.word	0x3fe62e42
 8005088:	35793c76 	.word	0x35793c76
 800508c:	3dea39ef 	.word	0x3dea39ef
 8005090:	8800759c 	.word	0x8800759c
 8005094:	7e37e43c 	.word	0x7e37e43c
 8005098:	40862e41 	.word	0x40862e41
 800509c:	7fefffff 	.word	0x7fefffff
 80050a0:	3fd62e42 	.word	0x3fd62e42
 80050a4:	3ff0a2b1 	.word	0x3ff0a2b1
 80050a8:	08005178 	.word	0x08005178
 80050ac:	08005168 	.word	0x08005168
 80050b0:	3ff00000 	.word	0x3ff00000
 80050b4:	08005188 	.word	0x08005188
 80050b8:	3defffff 	.word	0x3defffff

080050bc <with_errno>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	ed2d 8b02 	vpush	{d8}
 80050c2:	eeb0 8a40 	vmov.f32	s16, s0
 80050c6:	eef0 8a60 	vmov.f32	s17, s1
 80050ca:	4604      	mov	r4, r0
 80050cc:	f7ff fdfc 	bl	8004cc8 <__errno>
 80050d0:	eeb0 0a48 	vmov.f32	s0, s16
 80050d4:	eef0 0a68 	vmov.f32	s1, s17
 80050d8:	ecbd 8b02 	vpop	{d8}
 80050dc:	6004      	str	r4, [r0, #0]
 80050de:	bd10      	pop	{r4, pc}

080050e0 <xflow>:
 80050e0:	4603      	mov	r3, r0
 80050e2:	b507      	push	{r0, r1, r2, lr}
 80050e4:	ec51 0b10 	vmov	r0, r1, d0
 80050e8:	b183      	cbz	r3, 800510c <xflow+0x2c>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050f0:	e9cd 2300 	strd	r2, r3, [sp]
 80050f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f8:	f7fb fa22 	bl	8000540 <__aeabi_dmul>
 80050fc:	ec41 0b10 	vmov	d0, r0, r1
 8005100:	2022      	movs	r0, #34	@ 0x22
 8005102:	b003      	add	sp, #12
 8005104:	f85d eb04 	ldr.w	lr, [sp], #4
 8005108:	f7ff bfd8 	b.w	80050bc <with_errno>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	e7ee      	b.n	80050f0 <xflow+0x10>
 8005112:	0000      	movs	r0, r0
 8005114:	0000      	movs	r0, r0
	...

08005118 <__math_uflow>:
 8005118:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005120 <__math_uflow+0x8>
 800511c:	f7ff bfe0 	b.w	80050e0 <xflow>
 8005120:	00000000 	.word	0x00000000
 8005124:	10000000 	.word	0x10000000

08005128 <__math_oflow>:
 8005128:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005130 <__math_oflow+0x8>
 800512c:	f7ff bfd8 	b.w	80050e0 <xflow>
 8005130:	00000000 	.word	0x00000000
 8005134:	70000000 	.word	0x70000000

08005138 <_init>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr

08005144 <_fini>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr
