
CoolingModule-Firmware-FE13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005058  08005058  00006058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a0  080050a0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a8  080050a8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050ac  080050ac  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080050b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00000394  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c16  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002512  00000000  00000000  00017cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  0001a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6b  00000000  00000000  0001b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002134c  00000000  00000000  0001bbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011746  00000000  00000000  0003cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd0a  00000000  00000000  0004e66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e377  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000432c  00000000  00000000  0011e3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001226e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005040 	.word	0x08005040

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08005040 	.word	0x08005040

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <ADC_Input_Init>:
 */

#include "adc.h"

void ADC_Input_Init(ADC_Input_t* adc, ADC_HandleTypeDef* h_adc, uint32_t channel, uint32_t rank, uint32_t sample_time)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
	adc->h_adc = h_adc;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	601a      	str	r2, [r3, #0]
	adc->sConfig.Channel = channel;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	605a      	str	r2, [r3, #4]
	adc->sConfig.Rank = rank;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	609a      	str	r2, [r3, #8]
	adc->sConfig.SamplingTime = sample_time;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	60da      	str	r2, [r3, #12]
	adc->value = 0;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	829a      	strh	r2, [r3, #20]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <ADC_Measure>:

HAL_StatusTypeDef ADC_Measure(ADC_Input_t* adc, uint32_t timeout)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_res = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]

	// select ADC channel
	hal_res = HAL_ADC_ConfigChannel(adc->h_adc, &adc->sConfig);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3304      	adds	r3, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	f001 fa45 	bl	8002370 <HAL_ADC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <ADC_Measure+0x2c>
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	e022      	b.n	8000f3a <ADC_Measure+0x72>

	// begin conversion
	hal_res = HAL_ADC_Start(adc->h_adc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f8cf 	bl	800209c <HAL_ADC_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <ADC_Measure+0x44>
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	e016      	b.n	8000f3a <ADC_Measure+0x72>

	// wait for conversion to complete
	hal_res = HAL_ADC_PollForConversion(adc->h_adc, timeout);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6839      	ldr	r1, [r7, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f994 	bl	8002240 <HAL_ADC_PollForConversion>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <ADC_Measure+0x5e>
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	e009      	b.n	8000f3a <ADC_Measure+0x72>

	adc->value = HAL_ADC_GetValue(adc->h_adc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fa13 	bl	8002356 <HAL_ADC_GetValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	829a      	strh	r2, [r3, #20]
	return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <CAN_Filter_Init>:
extern CAN_HandleTypeDef hcan2;

CAN_DATA_t can_data;

void CAN_Filter_Init()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
	// Filter vehicle state messages into FIFO0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	623b      	str	r3, [r7, #32]
	can_filter.SlaveStartFilterBank = 20; // how many of the 28 filters to assign to the HCAN1 (master can)
 8000f4e:	2314      	movs	r3, #20
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
	can_filter.FilterBank = 0; // which filter bank to use
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
	if (HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK) {
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <CAN_Filter_Init+0x6c>)
 8000f78:	f001 fd14 	bl	80029a4 <HAL_CAN_ConfigFilter>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <CAN_Filter_Init+0x42>
	  Error_Handler();
 8000f82:	f000 fd0f 	bl	80019a4 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000f86:	2102      	movs	r1, #2
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <CAN_Filter_Init+0x6c>)
 8000f8a:	f001 ff32 	bl	8002df2 <HAL_CAN_ActivateNotification>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <CAN_Filter_Init+0x54>
		Error_Handler();
 8000f94:	f000 fd06 	bl	80019a4 <Error_Handler>
	}
	if ( HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <CAN_Filter_Init+0x6c>)
 8000f9a:	f001 fde1 	bl	8002b60 <HAL_CAN_Start>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <CAN_Filter_Init+0x64>
		Error_Handler();
 8000fa4:	f000 fcfe 	bl	80019a4 <Error_Handler>
	}
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	@ 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200001e0 	.word	0x200001e0

08000fb4 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(CAN_HandleTypeDef *hcan_ptr, uint32_t id, uint8_t* data, uint8_t len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	70fb      	strb	r3, [r7, #3]
	static uint32_t TxMailbox;
	static CAN_TxHeaderTypeDef msg_hdr;
	msg_hdr.IDE = CAN_ID_STD;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <CAN_Send+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
	msg_hdr.StdId = id;
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <CAN_Send+0x4c>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	6013      	str	r3, [r2, #0]
	msg_hdr.RTR = CAN_RTR_DATA;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <CAN_Send+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
	msg_hdr.DLC = len;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <CAN_Send+0x4c>)
 8000fd8:	6113      	str	r3, [r2, #16]

	if(HAL_CAN_GetTxMailboxesFreeLevel(hcan_ptr) == 0) return HAL_OK;
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f001 fed4 	bl	8002d88 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <CAN_Send+0x36>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e006      	b.n	8000ff8 <CAN_Send+0x44>
	return HAL_CAN_AddTxMessage(hcan_ptr, &msg_hdr, data, &TxMailbox);
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <CAN_Send+0x50>)
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4904      	ldr	r1, [pc, #16]	@ (8001000 <CAN_Send+0x4c>)
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f001 fdf9 	bl	8002be8 <HAL_CAN_AddTxMessage>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000098 	.word	0x20000098
 8001004:	200000b0 	.word	0x200000b0

08001008 <Cooling_Init>:
int16_t get_air_temp(uint16_t adc_val);
void set_fan_speed(uint8_t speed);
void set_pump_speed(uint8_t speed);
void update_pwm(int16_t inlet_temp);

void Cooling_Init(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8
	// TODO check channels
	ADC_Input_Init(&adc_inlet_temp, &hadc1, ADC_CHANNEL_0, 1, ADC_SAMPLETIME_480CYCLES);
 800100e:	2307      	movs	r3, #7
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2200      	movs	r2, #0
 8001016:	492a      	ldr	r1, [pc, #168]	@ (80010c0 <Cooling_Init+0xb8>)
 8001018:	482a      	ldr	r0, [pc, #168]	@ (80010c4 <Cooling_Init+0xbc>)
 800101a:	f7ff ff39 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_outlet_temp, &hadc1, ADC_CHANNEL_1, 1, ADC_SAMPLETIME_480CYCLES);
 800101e:	2307      	movs	r3, #7
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	2201      	movs	r2, #1
 8001026:	4926      	ldr	r1, [pc, #152]	@ (80010c0 <Cooling_Init+0xb8>)
 8001028:	4827      	ldr	r0, [pc, #156]	@ (80010c8 <Cooling_Init+0xc0>)
 800102a:	f7ff ff31 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_air_in_temp, &hadc1, ADC_CHANNEL_2, 1, ADC_SAMPLETIME_480CYCLES);
 800102e:	2307      	movs	r3, #7
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	2202      	movs	r2, #2
 8001036:	4922      	ldr	r1, [pc, #136]	@ (80010c0 <Cooling_Init+0xb8>)
 8001038:	4824      	ldr	r0, [pc, #144]	@ (80010cc <Cooling_Init+0xc4>)
 800103a:	f7ff ff29 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_air_out_temp, &hadc1, ADC_CHANNEL_3, 1, ADC_SAMPLETIME_480CYCLES);
 800103e:	2307      	movs	r3, #7
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	491e      	ldr	r1, [pc, #120]	@ (80010c0 <Cooling_Init+0xb8>)
 8001048:	4821      	ldr	r0, [pc, #132]	@ (80010d0 <Cooling_Init+0xc8>)
 800104a:	f7ff ff21 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_1, &hadc1, ADC_CHANNEL_14, 1, ADC_SAMPLETIME_480CYCLES);
 800104e:	2307      	movs	r3, #7
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	220e      	movs	r2, #14
 8001056:	491a      	ldr	r1, [pc, #104]	@ (80010c0 <Cooling_Init+0xb8>)
 8001058:	481e      	ldr	r0, [pc, #120]	@ (80010d4 <Cooling_Init+0xcc>)
 800105a:	f7ff ff19 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_2, &hadc1, ADC_CHANNEL_15, 1, ADC_SAMPLETIME_480CYCLES);
 800105e:	2307      	movs	r3, #7
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	220f      	movs	r2, #15
 8001066:	4916      	ldr	r1, [pc, #88]	@ (80010c0 <Cooling_Init+0xb8>)
 8001068:	481b      	ldr	r0, [pc, #108]	@ (80010d8 <Cooling_Init+0xd0>)
 800106a:	f7ff ff11 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_3, &hadc1, ADC_CHANNEL_8, 1, ADC_SAMPLETIME_480CYCLES);
 800106e:	2307      	movs	r3, #7
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	2208      	movs	r2, #8
 8001076:	4912      	ldr	r1, [pc, #72]	@ (80010c0 <Cooling_Init+0xb8>)
 8001078:	4818      	ldr	r0, [pc, #96]	@ (80010dc <Cooling_Init+0xd4>)
 800107a:	f7ff ff09 	bl	8000e90 <ADC_Input_Init>
	ADC_Input_Init(&adc_extra_4, &hadc1, ADC_CHANNEL_9, 1, ADC_SAMPLETIME_480CYCLES);
 800107e:	2307      	movs	r3, #7
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	2209      	movs	r2, #9
 8001086:	490e      	ldr	r1, [pc, #56]	@ (80010c0 <Cooling_Init+0xb8>)
 8001088:	4815      	ldr	r0, [pc, #84]	@ (80010e0 <Cooling_Init+0xd8>)
 800108a:	f7ff ff01 	bl	8000e90 <ADC_Input_Init>
	//  ADC_Input_Init(&adc_inlet_pres, &hadc1, ADC_CHANNEL_4, 1, ADC_SAMPLETIME_480CYCLES);
	//	ADC_Input_Init(&adc_outlet_pres, &hadc1, ADC_CHANNEL_5, 1, ADC_SAMPLETIME_480CYCLES);

	PWM_Init(&pwm_fan, &htim1, TIM_CHANNEL_1);
 800108e:	2200      	movs	r2, #0
 8001090:	4914      	ldr	r1, [pc, #80]	@ (80010e4 <Cooling_Init+0xdc>)
 8001092:	4815      	ldr	r0, [pc, #84]	@ (80010e8 <Cooling_Init+0xe0>)
 8001094:	f000 fc8c 	bl	80019b0 <PWM_Init>
	PWM_Init(&pwm_pump, &htim1, TIM_CHANNEL_2);
 8001098:	2204      	movs	r2, #4
 800109a:	4912      	ldr	r1, [pc, #72]	@ (80010e4 <Cooling_Init+0xdc>)
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <Cooling_Init+0xe4>)
 800109e:	f000 fc87 	bl	80019b0 <PWM_Init>
	PWM_Init(&pwm_extra, &htim1, TIM_CHANNEL_3);
 80010a2:	2208      	movs	r2, #8
 80010a4:	490f      	ldr	r1, [pc, #60]	@ (80010e4 <Cooling_Init+0xdc>)
 80010a6:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <Cooling_Init+0xe8>)
 80010a8:	f000 fc82 	bl	80019b0 <PWM_Init>

	set_pump_speed(255);
 80010ac:	20ff      	movs	r0, #255	@ 0xff
 80010ae:	f000 fa0f 	bl	80014d0 <set_pump_speed>
	set_fan_speed(128);
 80010b2:	2080      	movs	r0, #128	@ 0x80
 80010b4:	f000 fa1c 	bl	80014f0 <set_fan_speed>
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000198 	.word	0x20000198
 80010c4:	200000b4 	.word	0x200000b4
 80010c8:	200000cc 	.word	0x200000cc
 80010cc:	200000e4 	.word	0x200000e4
 80010d0:	200000fc 	.word	0x200000fc
 80010d4:	20000114 	.word	0x20000114
 80010d8:	2000012c 	.word	0x2000012c
 80010dc:	20000144 	.word	0x20000144
 80010e0:	2000015c 	.word	0x2000015c
 80010e4:	20000230 	.word	0x20000230
 80010e8:	20000174 	.word	0x20000174
 80010ec:	2000017c 	.word	0x2000017c
 80010f0:	20000184 	.word	0x20000184

080010f4 <Cooling_Update>:

void Cooling_Update()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	static uint8_t loop_count = 0;
	static uint8_t tx_data[8];


	loop_count++;
 80010fa:	4b3d      	ldr	r3, [pc, #244]	@ (80011f0 <Cooling_Update+0xfc>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b3b      	ldr	r3, [pc, #236]	@ (80011f0 <Cooling_Update+0xfc>)
 8001104:	701a      	strb	r2, [r3, #0]
	if(loop_count <= SLOW_DIVIDER) return;
 8001106:	4b3a      	ldr	r3, [pc, #232]	@ (80011f0 <Cooling_Update+0xfc>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b32      	cmp	r3, #50	@ 0x32
 800110c:	d96b      	bls.n	80011e6 <Cooling_Update+0xf2>
	loop_count = 0;
 800110e:	4b38      	ldr	r3, [pc, #224]	@ (80011f0 <Cooling_Update+0xfc>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]

	// NOTE: can send temps and pressures at reduced frequency if CAN traffic too high

	ADC_Measure(&adc_inlet_temp, 1000);
 8001114:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001118:	4836      	ldr	r0, [pc, #216]	@ (80011f4 <Cooling_Update+0x100>)
 800111a:	f7ff fed5 	bl	8000ec8 <ADC_Measure>
	ADC_Measure(&adc_outlet_temp, 1000);
 800111e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001122:	4835      	ldr	r0, [pc, #212]	@ (80011f8 <Cooling_Update+0x104>)
 8001124:	f7ff fed0 	bl	8000ec8 <ADC_Measure>
	ADC_Measure(&adc_air_in_temp, 1000);
 8001128:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800112c:	4833      	ldr	r0, [pc, #204]	@ (80011fc <Cooling_Update+0x108>)
 800112e:	f7ff fecb 	bl	8000ec8 <ADC_Measure>
	ADC_Measure(&adc_air_out_temp, 1000);
 8001132:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001136:	4832      	ldr	r0, [pc, #200]	@ (8001200 <Cooling_Update+0x10c>)
 8001138:	f7ff fec6 	bl	8000ec8 <ADC_Measure>

	int16_t inlet_temp = get_temp(adc_inlet_temp.value);
 800113c:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <Cooling_Update+0x100>)
 800113e:	8a9b      	ldrh	r3, [r3, #20]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f8f5 	bl	8001330 <get_temp>
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
	int16_t outlet_temp = get_temp(adc_outlet_temp.value);
 800114a:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <Cooling_Update+0x104>)
 800114c:	8a9b      	ldrh	r3, [r3, #20]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f8ee 	bl	8001330 <get_temp>
 8001154:	4603      	mov	r3, r0
 8001156:	80bb      	strh	r3, [r7, #4]
	int16_t temp_air_in = get_air_temp(adc_air_in_temp.value);
 8001158:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <Cooling_Update+0x108>)
 800115a:	8a9b      	ldrh	r3, [r3, #20]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f95b 	bl	8001418 <get_air_temp>
 8001162:	4603      	mov	r3, r0
 8001164:	807b      	strh	r3, [r7, #2]
	int16_t temp_air_out = get_air_temp(adc_air_out_temp.value);
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <Cooling_Update+0x10c>)
 8001168:	8a9b      	ldrh	r3, [r3, #20]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f954 	bl	8001418 <get_air_temp>
 8001170:	4603      	mov	r3, r0
 8001172:	803b      	strh	r3, [r7, #0]

	tx_data[0] = HI8(inlet_temp);
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001178:	121b      	asrs	r3, r3, #8
 800117a:	b21b      	sxth	r3, r3
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <Cooling_Update+0x110>)
 8001180:	701a      	strb	r2, [r3, #0]
	tx_data[1] = LO8(inlet_temp);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <Cooling_Update+0x110>)
 8001188:	705a      	strb	r2, [r3, #1]
	tx_data[2] = HI8(outlet_temp);
 800118a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800118e:	121b      	asrs	r3, r3, #8
 8001190:	b21b      	sxth	r3, r3
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <Cooling_Update+0x110>)
 8001196:	709a      	strb	r2, [r3, #2]
	tx_data[3] = LO8(outlet_temp);
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <Cooling_Update+0x110>)
 800119e:	70da      	strb	r2, [r3, #3]
	tx_data[4] = HI8(temp_air_in);
 80011a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011a4:	121b      	asrs	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <Cooling_Update+0x110>)
 80011ac:	711a      	strb	r2, [r3, #4]
	tx_data[5] = LO8(temp_air_in);
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <Cooling_Update+0x110>)
 80011b4:	715a      	strb	r2, [r3, #5]
	tx_data[6] = HI8(temp_air_out);
 80011b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011ba:	121b      	asrs	r3, r3, #8
 80011bc:	b21b      	sxth	r3, r3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <Cooling_Update+0x110>)
 80011c2:	719a      	strb	r2, [r3, #6]
	tx_data[7] = LO8(temp_air_out);
 80011c4:	883b      	ldrh	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <Cooling_Update+0x110>)
 80011ca:	71da      	strb	r2, [r3, #7]
	CAN_Send(&hcan2, COOLING_LOOP_TEMPS, tx_data, 8);
 80011cc:	2308      	movs	r3, #8
 80011ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <Cooling_Update+0x110>)
 80011d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <Cooling_Update+0x114>)
 80011d6:	f7ff feed 	bl	8000fb4 <CAN_Send>
//	tx_data[3] = LO8(outlet_pres);
//	CAN_Send(&hcan2, COOLING_LOOP_PRESSURES, tx_data, 4);



	update_pwm(inlet_temp);
 80011da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f814 	bl	800120c <update_pwm>
 80011e4:	e000      	b.n	80011e8 <Cooling_Update+0xf4>
	if(loop_count <= SLOW_DIVIDER) return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000018c 	.word	0x2000018c
 80011f4:	200000b4 	.word	0x200000b4
 80011f8:	200000cc 	.word	0x200000cc
 80011fc:	200000e4 	.word	0x200000e4
 8001200:	200000fc 	.word	0x200000fc
 8001204:	20000190 	.word	0x20000190
 8001208:	20000208 	.word	0x20000208

0800120c <update_pwm>:

void update_pwm(int16_t inlet_temp)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	//set_pump_speed(40);

	// allow cooling override: use hardcoded values for pump and fan speed
	if (can_data.PWM_requested) {
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <update_pwm+0x110>)
 8001218:	7b5b      	ldrb	r3, [r3, #13]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <update_pwm+0x20>
		set_pump_speed(255);
 800121e:	20ff      	movs	r0, #255	@ 0xff
 8001220:	f000 f956 	bl	80014d0 <set_pump_speed>
		set_fan_speed(128);
 8001224:	2080      	movs	r0, #128	@ 0x80
 8001226:	f000 f963 	bl	80014f0 <set_fan_speed>
		return;
 800122a:	e073      	b.n	8001314 <update_pwm+0x108>
	static int fan_t2 = FAN_THRESH_2 + HYSTERESIS;
	static int fan_t3 = FAN_THRESH_2 + HYSTERESIS;
	static int pump_t = PUMP_THRESH + HYSTERESIS;

	//TODO: update these values to consider ambient air temp, vehicle speed, etc?
	if(can_data.inverter_enable || (can_data.mc_temp_max > pump_t) || (can_data.motor_temp > pump_t)){
 800122c:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <update_pwm+0x110>)
 800122e:	7b1b      	ldrb	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10f      	bne.n	8001254 <update_pwm+0x48>
 8001234:	4b39      	ldr	r3, [pc, #228]	@ (800131c <update_pwm+0x110>)
 8001236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800123a:	461a      	mov	r2, r3
 800123c:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <update_pwm+0x114>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	dc07      	bgt.n	8001254 <update_pwm+0x48>
 8001244:	4b35      	ldr	r3, [pc, #212]	@ (800131c <update_pwm+0x110>)
 8001246:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800124a:	461a      	mov	r2, r3
 800124c:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <update_pwm+0x114>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	dd07      	ble.n	8001264 <update_pwm+0x58>
		set_pump_speed(255);
 8001254:	20ff      	movs	r0, #255	@ 0xff
 8001256:	f000 f93b 	bl	80014d0 <set_pump_speed>
		pump_t = PUMP_THRESH;
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <update_pwm+0x114>)
 800125c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e006      	b.n	8001272 <update_pwm+0x66>
	} else {
		set_pump_speed(0);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 f933 	bl	80014d0 <set_pump_speed>
		pump_t = PUMP_THRESH + HYSTERESIS;
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <update_pwm+0x114>)
 800126c:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001270:	601a      	str	r2, [r3, #0]
	}

	if(inlet_temp > fan_t3){
 8001272:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001276:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <update_pwm+0x118>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	dd0f      	ble.n	800129e <update_pwm+0x92>
		set_fan_speed(255);
 800127e:	20ff      	movs	r0, #255	@ 0xff
 8001280:	f000 f936 	bl	80014f0 <set_fan_speed>
		fan_t1 = FAN_THRESH_1;
 8001284:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <update_pwm+0x11c>)
 8001286:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800128a:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2;
 800128c:	4b27      	ldr	r3, [pc, #156]	@ (800132c <update_pwm+0x120>)
 800128e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001292:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3;
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <update_pwm+0x118>)
 8001296:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e03a      	b.n	8001314 <update_pwm+0x108>
	} else if(inlet_temp > fan_t2){
 800129e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012a2:	4b22      	ldr	r3, [pc, #136]	@ (800132c <update_pwm+0x120>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dd0f      	ble.n	80012ca <update_pwm+0xbe>
		set_fan_speed(180);
 80012aa:	20b4      	movs	r0, #180	@ 0xb4
 80012ac:	f000 f920 	bl	80014f0 <set_fan_speed>
		fan_t1 = FAN_THRESH_1;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <update_pwm+0x11c>)
 80012b2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012b6:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <update_pwm+0x120>)
 80012ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012be:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3 + HYSTERESIS;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <update_pwm+0x118>)
 80012c2:	f240 2276 	movw	r2, #630	@ 0x276
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e024      	b.n	8001314 <update_pwm+0x108>
	} else if(inlet_temp > fan_t1){
 80012ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <update_pwm+0x11c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dd0f      	ble.n	80012f6 <update_pwm+0xea>
		fan_t1 = FAN_THRESH_1;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <update_pwm+0x11c>)
 80012d8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012dc:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2 + HYSTERESIS;
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <update_pwm+0x120>)
 80012e0:	f240 2212 	movw	r2, #530	@ 0x212
 80012e4:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3 + HYSTERESIS;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <update_pwm+0x118>)
 80012e8:	f240 2276 	movw	r2, #630	@ 0x276
 80012ec:	601a      	str	r2, [r3, #0]
		set_fan_speed(100);
 80012ee:	2064      	movs	r0, #100	@ 0x64
 80012f0:	f000 f8fe 	bl	80014f0 <set_fan_speed>
 80012f4:	e00e      	b.n	8001314 <update_pwm+0x108>
	} else {
		fan_t1 = FAN_THRESH_1 + HYSTERESIS;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <update_pwm+0x11c>)
 80012f8:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80012fc:	601a      	str	r2, [r3, #0]
		fan_t2 = FAN_THRESH_2 + HYSTERESIS;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <update_pwm+0x120>)
 8001300:	f240 2212 	movw	r2, #530	@ 0x212
 8001304:	601a      	str	r2, [r3, #0]
		fan_t3 = FAN_THRESH_3 + HYSTERESIS;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <update_pwm+0x118>)
 8001308:	f240 2276 	movw	r2, #630	@ 0x276
 800130c:	601a      	str	r2, [r3, #0]
		set_fan_speed(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f8ee 	bl	80014f0 <set_fan_speed>
	}
}
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000088 	.word	0x20000088
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
 8001328:	20000008 	.word	0x20000008
 800132c:	2000000c 	.word	0x2000000c

08001330 <get_temp>:

int16_t get_temp(uint16_t adc_val)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	// need to recalibrate these sensors with new GE2098(Already calibrated)
	float temp = (99.2596*exp((-3.22926) * adc_val / 4095) - 21.4981-3.17)/1.01085;
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f895 	bl	800046c <__aeabi_i2d>
 8001342:	a329      	add	r3, pc, #164	@ (adr r3, 80013e8 <get_temp+0xb8>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f8fa 	bl	8000540 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	a326      	add	r3, pc, #152	@ (adr r3, 80013f0 <get_temp+0xc0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fa1b 	bl	8000794 <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	ec43 2b17 	vmov	d7, r2, r3
 8001366:	eeb0 0a47 	vmov.f32	s0, s14
 800136a:	eef0 0a67 	vmov.f32	s1, s15
 800136e:	f003 fc5b 	bl	8004c28 <exp>
 8001372:	ec51 0b10 	vmov	r0, r1, d0
 8001376:	a320      	add	r3, pc, #128	@ (adr r3, 80013f8 <get_temp+0xc8>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff f8e0 	bl	8000540 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	a31d      	add	r3, pc, #116	@ (adr r3, 8001400 <get_temp+0xd0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7fe ff1f 	bl	80001d0 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001408 <get_temp+0xd8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff16 	bl	80001d0 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	a318      	add	r3, pc, #96	@ (adr r3, 8001410 <get_temp+0xe0>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f9ef 	bl	8000794 <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fb81 	bl	8000ac4 <__aeabi_d2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	60fb      	str	r3, [r7, #12]
	return (int16_t) (temp*10);
 80013c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	b21b      	sxth	r3, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	44523f68 	.word	0x44523f68
 80013ec:	c009d586 	.word	0xc009d586
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40affe00 	.word	0x40affe00
 80013f8:	495182aa 	.word	0x495182aa
 80013fc:	4058d09d 	.word	0x4058d09d
 8001400:	7b4a233a 	.word	0x7b4a233a
 8001404:	40357f83 	.word	0x40357f83
 8001408:	f5c28f5c 	.word	0xf5c28f5c
 800140c:	40095c28 	.word	0x40095c28
 8001410:	0cb295ea 	.word	0x0cb295ea
 8001414:	3ff02c71 	.word	0x3ff02c71

08001418 <get_air_temp>:

int16_t get_air_temp(uint16_t adc_val)
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	80fb      	strh	r3, [r7, #6]
	float temp = 83.35412 - 0.03634221 * adc_val +0.0000034466 * adc_val * adc_val;
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f820 	bl	800046c <__aeabi_i2d>
 800142c:	a322      	add	r3, pc, #136	@ (adr r3, 80014b8 <get_air_temp+0xa0>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f885 	bl	8000540 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	a121      	add	r1, pc, #132	@ (adr r1, 80014c0 <get_air_temp+0xa8>)
 800143c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001440:	f7fe fec6 	bl	80001d0 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4614      	mov	r4, r2
 800144a:	461d      	mov	r5, r3
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f80c 	bl	800046c <__aeabi_i2d>
 8001454:	a31c      	add	r3, pc, #112	@ (adr r3, 80014c8 <get_air_temp+0xb0>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f871 	bl	8000540 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4690      	mov	r8, r2
 8001464:	4699      	mov	r9, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffff 	bl	800046c <__aeabi_i2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4640      	mov	r0, r8
 8001474:	4649      	mov	r1, r9
 8001476:	f7ff f863 	bl	8000540 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe fea7 	bl	80001d4 <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fb19 	bl	8000ac4 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	60fb      	str	r3, [r7, #12]
	return (int16_t) (temp *10);
 8001496:	edd7 7a03 	vldr	s15, [r7, #12]
 800149a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a6:	ee17 3a90 	vmov	r3, s15
 80014aa:	b21b      	sxth	r3, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014b6:	bf00      	nop
 80014b8:	36d4278a 	.word	0x36d4278a
 80014bc:	3fa29b72 	.word	0x3fa29b72
 80014c0:	e6eeb702 	.word	0xe6eeb702
 80014c4:	4054d6a9 	.word	0x4054d6a9
 80014c8:	635d8fac 	.word	0x635d8fac
 80014cc:	3ecce984 	.word	0x3ecce984

080014d0 <set_pump_speed>:


void set_pump_speed(uint8_t speed)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	PWM_SetDutyCycle(&pwm_pump, speed);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4619      	mov	r1, r3
 80014de:	4803      	ldr	r0, [pc, #12]	@ (80014ec <set_pump_speed+0x1c>)
 80014e0:	f000 fa7c 	bl	80019dc <PWM_SetDutyCycle>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000017c 	.word	0x2000017c

080014f0 <set_fan_speed>:

void set_fan_speed(uint8_t speed)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	PWM_SetDutyCycle(&pwm_fan, speed);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <set_fan_speed+0x1c>)
 8001500:	f000 fa6c 	bl	80019dc <PWM_SetDutyCycle>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000174 	.word	0x20000174

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f000 fd0c 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f814 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 f9fe 	bl	800191c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001520:	f000 f8ca 	bl	80016b8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001524:	f000 f8fe 	bl	8001724 <MX_CAN2_Init>
  MX_ADC1_Init();
 8001528:	f000 f874 	bl	8001614 <MX_ADC1_Init>
  MX_TIM1_Init();
 800152c:	f000 f930 	bl	8001790 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001530:	f000 f9ca 	bl	80018c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  CAN_Filter_Init(); // hcan1 is PCAN, hcan2 is TCAN
 8001534:	f7ff fd06 	bl	8000f44 <CAN_Filter_Init>
  Cooling_Init();
 8001538:	f7ff fd66 	bl	8001008 <Cooling_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Cooling_Update();
 800153c:	f7ff fdda 	bl	80010f4 <Cooling_Update>
  {
 8001540:	bf00      	nop
 8001542:	e7fb      	b.n	800153c <main+0x2c>

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	@ 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2230      	movs	r2, #48	@ 0x30
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fb36 	bl	8004bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <SystemClock_Config+0xc8>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	4a26      	ldr	r2, [pc, #152]	@ (800160c <SystemClock_Config+0xc8>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	@ 0x40
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <SystemClock_Config+0xc8>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <SystemClock_Config+0xcc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a20      	ldr	r2, [pc, #128]	@ (8001610 <SystemClock_Config+0xcc>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <SystemClock_Config+0xcc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a8:	2310      	movs	r3, #16
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ac:	2302      	movs	r3, #2
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015b4:	2308      	movs	r3, #8
 80015b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015b8:	2332      	movs	r3, #50	@ 0x32
 80015ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c0:	2304      	movs	r3, #4
 80015c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 febb 	bl	8003344 <HAL_RCC_OscConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015d4:	f000 f9e6 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d8:	230f      	movs	r3, #15
 80015da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015dc:	2302      	movs	r3, #2
 80015de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 f91d 	bl	8003834 <HAL_RCC_ClockConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001600:	f000 f9d0 	bl	80019a4 <Error_Handler>
  }
}
 8001604:	bf00      	nop
 8001606:	3750      	adds	r7, #80	@ 0x50
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000

08001614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001628:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <MX_ADC1_Init+0x9c>)
 800162a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001638:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_ADC1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <MX_ADC1_Init+0xa0>)
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_ADC1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001660:	2201      	movs	r2, #1
 8001662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_ADC1_Init+0x98>)
 800166e:	2201      	movs	r2, #1
 8001670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001672:	480e      	ldr	r0, [pc, #56]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001674:	f000 fcce 	bl	8002014 <HAL_ADC_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800167e:	f000 f991 	bl	80019a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001694:	f000 fe6c 	bl	8002370 <HAL_ADC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800169e:	f000 f981 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000198 	.word	0x20000198
 80016b0:	40012000 	.word	0x40012000
 80016b4:	0f000001 	.word	0x0f000001

080016b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <MX_CAN1_Init+0x64>)
 80016be:	4a18      	ldr	r2, [pc, #96]	@ (8001720 <MX_CAN1_Init+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <MX_CAN1_Init+0x64>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_CAN1_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_CAN1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_CAN1_Init+0x64>)
 80016d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_CAN1_Init+0x64>)
 80016de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <MX_CAN1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_CAN1_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <MX_CAN1_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_CAN1_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	@ (800171c <MX_CAN1_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_CAN1_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	@ (800171c <MX_CAN1_Init+0x64>)
 800170a:	f001 f84f 	bl	80027ac <HAL_CAN_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001714:	f000 f946 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200001e0 	.word	0x200001e0
 8001720:	40006400 	.word	0x40006400

08001724 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <MX_CAN2_Init+0x64>)
 800172a:	4a18      	ldr	r2, [pc, #96]	@ (800178c <MX_CAN2_Init+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001730:	220a      	movs	r2, #10
 8001732:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_CAN2_Init+0x64>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001742:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001746:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_CAN2_Init+0x64>)
 800174a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800174e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <MX_CAN2_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <MX_CAN2_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	@ (8001788 <MX_CAN2_Init+0x64>)
 8001776:	f001 f819 	bl	80027ac <HAL_CAN_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001780:	f000 f910 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000208 	.word	0x20000208
 800178c:	40006800 	.word	0x40006800

08001790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b092      	sub	sp, #72	@ 0x48
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2220      	movs	r2, #32
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fa02 	bl	8004bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c0:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017c2:	4a40      	ldr	r2, [pc, #256]	@ (80018c4 <MX_TIM1_Init+0x134>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017c6:	4b3e      	ldr	r3, [pc, #248]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b3c      	ldr	r3, [pc, #240]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017d2:	4b3b      	ldr	r3, [pc, #236]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b39      	ldr	r3, [pc, #228]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b36      	ldr	r3, [pc, #216]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ec:	4834      	ldr	r0, [pc, #208]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80017ee:	f002 fa01 	bl	8003bf4 <HAL_TIM_PWM_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80017f8:	f000 f8d4 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001804:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001808:	4619      	mov	r1, r3
 800180a:	482d      	ldr	r0, [pc, #180]	@ (80018c0 <MX_TIM1_Init+0x130>)
 800180c:	f002 fe48 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001816:	f000 f8c5 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181a:	2360      	movs	r3, #96	@ 0x60
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	4820      	ldr	r0, [pc, #128]	@ (80018c0 <MX_TIM1_Init+0x130>)
 8001840:	f002 faf0 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800184a:	f000 f8ab 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	2204      	movs	r2, #4
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	@ (80018c0 <MX_TIM1_Init+0x130>)
 8001858:	f002 fae4 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001862:	f000 f89f 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186a:	2208      	movs	r2, #8
 800186c:	4619      	mov	r1, r3
 800186e:	4814      	ldr	r0, [pc, #80]	@ (80018c0 <MX_TIM1_Init+0x130>)
 8001870:	f002 fad8 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800187a:	f000 f893 	bl	80019a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001896:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80018a2:	f002 fe79 	bl	8004598 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80018ac:	f000 f87a 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018b0:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <MX_TIM1_Init+0x130>)
 80018b2:	f000 fa4f 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 80018b6:	bf00      	nop
 80018b8:	3748      	adds	r7, #72	@ 0x48
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000230 	.word	0x20000230
 80018c4:	40010000 	.word	0x40010000

080018c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART1_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 8001900:	f002 fe9c 	bl	800463c <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f000 f84b 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000278 	.word	0x20000278
 8001918:	40011000 	.word	0x40011000

0800191c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <MX_GPIO_Init+0x84>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <MX_GPIO_Init+0x84>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_GPIO_Init+0x84>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_GPIO_Init+0x84>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <Error_Handler+0x8>

080019b0 <PWM_Init>:
 */

#include "pwm.h"

HAL_StatusTypeDef PWM_Init(PWM_Output_t* pwm, TIM_HandleTypeDef* h_tim, uint32_t channel)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	pwm->h_tim = h_tim;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	601a      	str	r2, [r3, #0]
	pwm->channel = channel;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]

	return HAL_TIM_PWM_Start(h_tim, channel);
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f002 f962 	bl	8003c94 <HAL_TIM_PWM_Start>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(PWM_Output_t* pwm, uint8_t duty)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
	uint32_t ccr = pwm->h_tim->Instance->ARR * (255-duty) / 255;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4a22      	ldr	r2, [pc, #136]	@ (8001a84 <PWM_SetDutyCycle+0xa8>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	09db      	lsrs	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

	switch(pwm->channel)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d835      	bhi.n	8001a78 <PWM_SetDutyCycle+0x9c>
 8001a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a14 <PWM_SetDutyCycle+0x38>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a49 	.word	0x08001a49
 8001a18:	08001a79 	.word	0x08001a79
 8001a1c:	08001a79 	.word	0x08001a79
 8001a20:	08001a79 	.word	0x08001a79
 8001a24:	08001a55 	.word	0x08001a55
 8001a28:	08001a79 	.word	0x08001a79
 8001a2c:	08001a79 	.word	0x08001a79
 8001a30:	08001a79 	.word	0x08001a79
 8001a34:	08001a61 	.word	0x08001a61
 8001a38:	08001a79 	.word	0x08001a79
 8001a3c:	08001a79 	.word	0x08001a79
 8001a40:	08001a79 	.word	0x08001a79
 8001a44:	08001a6d 	.word	0x08001a6d
	{
		case TIM_CHANNEL_1:
			pwm->h_tim->Instance->CCR1 = ccr;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001a52:	e011      	b.n	8001a78 <PWM_SetDutyCycle+0x9c>
		case TIM_CHANNEL_2:
			pwm->h_tim->Instance->CCR2 = ccr;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001a5e:	e00b      	b.n	8001a78 <PWM_SetDutyCycle+0x9c>
		case TIM_CHANNEL_3:
			pwm->h_tim->Instance->CCR3 = ccr;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001a6a:	e005      	b.n	8001a78 <PWM_SetDutyCycle+0x9c>
		case TIM_CHANNEL_4:
			pwm->h_tim->Instance->CCR4 = ccr;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001a76:	bf00      	nop
		default:
			//YO WTF?
	}
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	80808081 	.word	0x80808081

08001a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a31      	ldr	r2, [pc, #196]	@ (8001bbc <HAL_ADC_MspInit+0xe4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d15b      	bne.n	8001bb2 <HAL_ADC_MspInit+0xda>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	4b30      	ldr	r3, [pc, #192]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a28      	ldr	r2, [pc, #160]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a21      	ldr	r2, [pc, #132]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TEMP0_ADC_Pin|TEMP1_ADC_Pin|TEMP2_ADC_Pin|TEMP3_ADC_Pin;
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4811      	ldr	r0, [pc, #68]	@ (8001bc4 <HAL_ADC_MspInit+0xec>)
 8001b7e:	f001 fa45 	bl	800300c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTRA_SENSOR_1_Pin|EXTRA_SENSOR_2_Pin;
 8001b82:	2330      	movs	r3, #48	@ 0x30
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <HAL_ADC_MspInit+0xf0>)
 8001b96:	f001 fa39 	bl	800300c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTRA_SENSOR_3_Pin|EXTRA_SENSOR_4_Pin;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <HAL_ADC_MspInit+0xf4>)
 8001bae:	f001 fa2d 	bl	800300c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a43      	ldr	r2, [pc, #268]	@ (8001cfc <HAL_CAN_MspInit+0x12c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d136      	bne.n	8001c60 <HAL_CAN_MspInit+0x90>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bf2:	4b43      	ldr	r3, [pc, #268]	@ (8001d00 <HAL_CAN_MspInit+0x130>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4a41      	ldr	r2, [pc, #260]	@ (8001d00 <HAL_CAN_MspInit+0x130>)
 8001bfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001bfc:	4b40      	ldr	r3, [pc, #256]	@ (8001d00 <HAL_CAN_MspInit+0x130>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10d      	bne.n	8001c20 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	4b3e      	ldr	r3, [pc, #248]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c14:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	4a36      	ldr	r2, [pc, #216]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 8001c3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c4e:	2309      	movs	r3, #9
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	482b      	ldr	r0, [pc, #172]	@ (8001d08 <HAL_CAN_MspInit+0x138>)
 8001c5a:	f001 f9d7 	bl	800300c <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c5e:	e048      	b.n	8001cf2 <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a29      	ldr	r2, [pc, #164]	@ (8001d0c <HAL_CAN_MspInit+0x13c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d143      	bne.n	8001cf2 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	4a24      	ldr	r2, [pc, #144]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7a:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_CAN_MspInit+0x130>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <HAL_CAN_MspInit+0x130>)
 8001c8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c90:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_CAN_MspInit+0x130>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10d      	bne.n	8001cb4 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	4a18      	ldr	r2, [pc, #96]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001ca2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	4a11      	ldr	r2, [pc, #68]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <HAL_CAN_MspInit+0x134>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 8001cd0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001ce2:	2309      	movs	r3, #9
 8001ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	4619      	mov	r1, r3
 8001cec:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <HAL_CAN_MspInit+0x138>)
 8001cee:	f001 f98d 	bl	800300c <HAL_GPIO_Init>
}
 8001cf2:	bf00      	nop
 8001cf4:	3730      	adds	r7, #48	@ 0x30
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40006400 	.word	0x40006400
 8001d00:	200002c0 	.word	0x200002c0
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40006800 	.word	0x40006800

08001d10 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10d      	bne.n	8001d3e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_TIM_PWM_MspInit+0x40>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_TIM_PWM_MspInit+0x40>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_TIM_PWM_MspInit+0x40>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <HAL_TIM_MspPostInit+0x68>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d11e      	bne.n	8001db4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_TIM_MspPostInit+0x6c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a10      	ldr	r2, [pc, #64]	@ (8001dc0 <HAL_TIM_MspPostInit+0x6c>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <HAL_TIM_MspPostInit+0x6c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin|PUMP_PWM_Pin|EXTRA_PWM_Pin;
 8001d92:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <HAL_TIM_MspPostInit+0x70>)
 8001db0:	f001 f92c 	bl	800300c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	@ (8001e4c <HAL_UART_MspInit+0x84>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12b      	bne.n	8001e42 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_UART_MspInit+0x88>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a17      	ldr	r2, [pc, #92]	@ (8001e50 <HAL_UART_MspInit+0x88>)
 8001df4:	f043 0310 	orr.w	r3, r3, #16
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_UART_MspInit+0x88>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_UART_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a10      	ldr	r2, [pc, #64]	@ (8001e50 <HAL_UART_MspInit+0x88>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_UART_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_UART_TX_Pin|USB_UART_RX_Pin;
 8001e22:	23c0      	movs	r3, #192	@ 0xc0
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e32:	2307      	movs	r3, #7
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <HAL_UART_MspInit+0x8c>)
 8001e3e:	f001 f8e5 	bl	800300c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	@ 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <NMI_Handler+0x4>

08001e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <MemManage_Handler+0x4>

08001e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eae:	f000 f891 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <SystemInit+0x20>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <SystemInit+0x20>)
 8001ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <Reset_Handler>:
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f14 <LoopFillZerobss+0xe>
 8001ee0:	f7ff ffea 	bl	8001eb8 <SystemInit>
 8001ee4:	480c      	ldr	r0, [pc, #48]	@ (8001f18 <LoopFillZerobss+0x12>)
 8001ee6:	490d      	ldr	r1, [pc, #52]	@ (8001f1c <LoopFillZerobss+0x16>)
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <LoopFillZerobss+0x1a>)
 8001eea:	2300      	movs	r3, #0
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:
 8001eee:	58d4      	ldr	r4, [r2, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:
 8001ef4:	18c4      	adds	r4, r0, r3
 8001ef6:	428c      	cmp	r4, r1
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <LoopFillZerobss+0x1e>)
 8001efc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f28 <LoopFillZerobss+0x22>)
 8001efe:	2300      	movs	r3, #0
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:
 8001f06:	42a2      	cmp	r2, r4
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>
 8001f0a:	f002 fe69 	bl	8004be0 <__libc_init_array>
 8001f0e:	f7ff faff 	bl	8001510 <main>
 8001f12:	4770      	bx	lr
 8001f14:	20020000 	.word	0x20020000
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	2000006c 	.word	0x2000006c
 8001f20:	080050b0 	.word	0x080050b0
 8001f24:	2000006c 	.word	0x2000006c
 8001f28:	20000400 	.word	0x20000400

08001f2c <ADC_IRQHandler>:
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <HAL_Init+0x40>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <HAL_Init+0x40>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <HAL_Init+0x40>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f001 f823 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f000 f808 	bl	8001f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7ff fd90 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <HAL_InitTick+0x54>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_InitTick+0x58>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f82d 	bl	8002ff2 <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00e      	b.n	8001fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d80a      	bhi.n	8001fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f001 f803 	bl	8002fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	@ (8001fd0 <HAL_InitTick+0x5c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000010 	.word	0x20000010
 8001fcc:	20000018 	.word	0x20000018
 8001fd0:	20000014 	.word	0x20000014

08001fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000018 	.word	0x20000018
 8001ff8:	200002c4 	.word	0x200002c4

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b03      	ldr	r3, [pc, #12]	@ (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200002c4 	.word	0x200002c4

08002014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e033      	b.n	8002092 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fd50 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800205a:	f023 0302 	bic.w	r3, r3, #2
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 faa4 	bl	80025b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
 8002082:	e001      	b.n	8002088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Start+0x1a>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0b2      	b.n	800221c <HAL_ADC_Start+0x180>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d018      	beq.n	80020fe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020dc:	4b52      	ldr	r3, [pc, #328]	@ (8002228 <HAL_ADC_Start+0x18c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a52      	ldr	r2, [pc, #328]	@ (800222c <HAL_ADC_Start+0x190>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9a      	lsrs	r2, r3, #18
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d17a      	bne.n	8002202 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002136:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800214a:	d106      	bne.n	800215a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002150:	f023 0206 	bic.w	r2, r3, #6
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	645a      	str	r2, [r3, #68]	@ 0x44
 8002158:	e002      	b.n	8002160 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <HAL_ADC_Start+0x194>)
 800216a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002174:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d12a      	bne.n	80021d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <HAL_ADC_Start+0x198>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d015      	beq.n	80021b8 <HAL_ADC_Start+0x11c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a29      	ldr	r2, [pc, #164]	@ (8002238 <HAL_ADC_Start+0x19c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_Start+0x106>
 8002196:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_ADC_Start+0x194>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a25      	ldr	r2, [pc, #148]	@ (800223c <HAL_ADC_Start+0x1a0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d136      	bne.n	800221a <HAL_ADC_Start+0x17e>
 80021ac:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_ADC_Start+0x194>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d130      	bne.n	800221a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d129      	bne.n	800221a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e020      	b.n	800221a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a15      	ldr	r2, [pc, #84]	@ (8002234 <HAL_ADC_Start+0x198>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d11b      	bne.n	800221a <HAL_ADC_Start+0x17e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d114      	bne.n	800221a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e00b      	b.n	800221a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	20000010 	.word	0x20000010
 800222c:	431bde83 	.word	0x431bde83
 8002230:	40012300 	.word	0x40012300
 8002234:	40012000 	.word	0x40012000
 8002238:	40012100 	.word	0x40012100
 800223c:	40012200 	.word	0x40012200

08002240 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225c:	d113      	bne.n	8002286 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800226c:	d10b      	bne.n	8002286 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e063      	b.n	800234e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002286:	f7ff feb9 	bl	8001ffc <HAL_GetTick>
 800228a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800228c:	e021      	b.n	80022d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d01d      	beq.n	80022d2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_ADC_PollForConversion+0x6c>
 800229c:	f7ff feae 	bl	8001ffc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d212      	bcs.n	80022d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d00b      	beq.n	80022d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	f043 0204 	orr.w	r2, r3, #4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e03d      	b.n	800234e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d1d6      	bne.n	800228e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0212 	mvn.w	r2, #18
 80022e8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d123      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11f      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1c>
 8002388:	2302      	movs	r3, #2
 800238a:	e105      	b.n	8002598 <HAL_ADC_ConfigChannel+0x228>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b09      	cmp	r3, #9
 800239a:	d925      	bls.n	80023e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43da      	mvns	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	400a      	ands	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	4603      	mov	r3, r0
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4403      	add	r3, r0
 80023da:	3b1e      	subs	r3, #30
 80023dc:	409a      	lsls	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	e022      	b.n	800242e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	2207      	movs	r2, #7
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	400a      	ands	r2, r1
 800240a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6919      	ldr	r1, [r3, #16]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	4603      	mov	r3, r0
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4403      	add	r3, r0
 8002424:	409a      	lsls	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b06      	cmp	r3, #6
 8002434:	d824      	bhi.n	8002480 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b05      	subs	r3, #5
 8002448:	221f      	movs	r2, #31
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	3b05      	subs	r3, #5
 8002472:	fa00 f203 	lsl.w	r2, r0, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	635a      	str	r2, [r3, #52]	@ 0x34
 800247e:	e04c      	b.n	800251a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d824      	bhi.n	80024d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b23      	subs	r3, #35	@ 0x23
 800249a:	221f      	movs	r2, #31
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43da      	mvns	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	400a      	ands	r2, r1
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	3b23      	subs	r3, #35	@ 0x23
 80024c4:	fa00 f203 	lsl.w	r2, r0, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80024d0:	e023      	b.n	800251a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b41      	subs	r3, #65	@ 0x41
 80024e4:	221f      	movs	r2, #31
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b41      	subs	r3, #65	@ 0x41
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251a:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <HAL_ADC_ConfigChannel+0x234>)
 800251c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a21      	ldr	r2, [pc, #132]	@ (80025a8 <HAL_ADC_ConfigChannel+0x238>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d109      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1cc>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b12      	cmp	r3, #18
 800252e:	d105      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_ADC_ConfigChannel+0x238>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d123      	bne.n	800258e <HAL_ADC_ConfigChannel+0x21e>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b10      	cmp	r3, #16
 800254c:	d003      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x1e6>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b11      	cmp	r3, #17
 8002554:	d11b      	bne.n	800258e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b10      	cmp	r3, #16
 8002568:	d111      	bne.n	800258e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_ADC_ConfigChannel+0x23c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <HAL_ADC_ConfigChannel+0x240>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	0c9a      	lsrs	r2, r3, #18
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002580:	e002      	b.n	8002588 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40012300 	.word	0x40012300
 80025a8:	40012000 	.word	0x40012000
 80025ac:	20000010 	.word	0x20000010
 80025b0:	431bde83 	.word	0x431bde83

080025b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025bc:	4b79      	ldr	r3, [pc, #484]	@ (80027a4 <ADC_Init+0x1f0>)
 80025be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	021a      	lsls	r2, r3, #8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800260c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800262e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6899      	ldr	r1, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	4a58      	ldr	r2, [pc, #352]	@ (80027a8 <ADC_Init+0x1f4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800265a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6899      	ldr	r1, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800267c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e00f      	b.n	80026b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0202 	bic.w	r2, r2, #2
 80026c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e1b      	ldrb	r3, [r3, #24]
 80026cc:	005a      	lsls	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01b      	beq.n	8002718 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	3b01      	subs	r3, #1
 800270c:	035a      	lsls	r2, r3, #13
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	e007      	b.n	8002728 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002726:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	3b01      	subs	r3, #1
 8002744:	051a      	lsls	r2, r3, #20
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800275c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800276a:	025a      	lsls	r2, r3, #9
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	029a      	lsls	r2, r3, #10
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40012300 	.word	0x40012300
 80027a8:	0f000001 	.word	0x0f000001

080027ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0ed      	b.n	800299a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fa00 	bl	8001bd0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e0:	f7ff fc0c 	bl	8001ffc <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027e6:	e012      	b.n	800280e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027e8:	f7ff fc08 	bl	8001ffc <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b0a      	cmp	r3, #10
 80027f4:	d90b      	bls.n	800280e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2205      	movs	r2, #5
 8002806:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0c5      	b.n	800299a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0e5      	beq.n	80027e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0202 	bic.w	r2, r2, #2
 800282a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800282c:	f7ff fbe6 	bl	8001ffc <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002832:	e012      	b.n	800285a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002834:	f7ff fbe2 	bl	8001ffc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b0a      	cmp	r3, #10
 8002840:	d90b      	bls.n	800285a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2205      	movs	r2, #5
 8002852:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e09f      	b.n	800299a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e5      	bne.n	8002834 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7e1b      	ldrb	r3, [r3, #24]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d108      	bne.n	8002882 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e007      	b.n	8002892 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7e5b      	ldrb	r3, [r3, #25]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d108      	bne.n	80028ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e007      	b.n	80028bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7e9b      	ldrb	r3, [r3, #26]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d108      	bne.n	80028d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0220 	orr.w	r2, r2, #32
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e007      	b.n	80028e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0220 	bic.w	r2, r2, #32
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7edb      	ldrb	r3, [r3, #27]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d108      	bne.n	8002900 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0210 	bic.w	r2, r2, #16
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e007      	b.n	8002910 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0210 	orr.w	r2, r2, #16
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7f1b      	ldrb	r3, [r3, #28]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d108      	bne.n	800292a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e007      	b.n	800293a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0208 	bic.w	r2, r2, #8
 8002938:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7f5b      	ldrb	r3, [r3, #29]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d108      	bne.n	8002954 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0204 	orr.w	r2, r2, #4
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e007      	b.n	8002964 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	ea42 0103 	orr.w	r1, r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d003      	beq.n	80029c4 <HAL_CAN_ConfigFilter+0x20>
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	f040 80be 	bne.w	8002b40 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80029c4:	4b65      	ldr	r3, [pc, #404]	@ (8002b5c <HAL_CAN_ConfigFilter+0x1b8>)
 80029c6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029de:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	431a      	orrs	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2201      	movs	r2, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d123      	bne.n	8002a6e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	401a      	ands	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	3248      	adds	r2, #72	@ 0x48
 8002a4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a64:	6939      	ldr	r1, [r7, #16]
 8002a66:	3348      	adds	r3, #72	@ 0x48
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d122      	bne.n	8002abc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	3248      	adds	r2, #72	@ 0x48
 8002a9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ab0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ab2:	6939      	ldr	r1, [r7, #16]
 8002ab4:	3348      	adds	r3, #72	@ 0x48
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002ad6:	e007      	b.n	8002ae8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002b02:	e007      	b.n	8002b14 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b32:	f023 0201 	bic.w	r2, r3, #1
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e006      	b.n	8002b4e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40006400 	.word	0x40006400

08002b60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d12e      	bne.n	8002bd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7ff fa36 	bl	8001ffc <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b92:	e012      	b.n	8002bba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b94:	f7ff fa32 	bl	8001ffc <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d90b      	bls.n	8002bba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e012      	b.n	8002be0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e5      	bne.n	8002b94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e006      	b.n	8002be0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_AddTxMessage+0x2c>
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	f040 80ad 	bne.w	8002d6e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8095 	beq.w	8002d5e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	0e1b      	lsrs	r3, r3, #24
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c3e:	2201      	movs	r2, #1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	6809      	ldr	r1, [r1, #0]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3318      	adds	r3, #24
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	440b      	add	r3, r1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e00f      	b.n	8002c8c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c76:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c80:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3318      	adds	r3, #24
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	440b      	add	r3, r1
 8002c8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	3318      	adds	r3, #24
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	7d1b      	ldrb	r3, [r3, #20]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d111      	bne.n	8002ccc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3318      	adds	r3, #24
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	6811      	ldr	r1, [r2, #0]
 8002cbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3304      	adds	r3, #4
 8002cca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3307      	adds	r3, #7
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	061a      	lsls	r2, r3, #24
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3306      	adds	r3, #6
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3305      	adds	r3, #5
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	3204      	adds	r2, #4
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	4610      	mov	r0, r2
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	6811      	ldr	r1, [r2, #0]
 8002cf4:	ea43 0200 	orr.w	r2, r3, r0
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002d02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3303      	adds	r3, #3
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	061a      	lsls	r2, r3, #24
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3302      	adds	r3, #2
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	4610      	mov	r0, r2
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	6811      	ldr	r1, [r2, #0]
 8002d2a:	ea43 0200 	orr.w	r2, r3, r0
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	440b      	add	r3, r1
 8002d34:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002d38:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3318      	adds	r3, #24
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3318      	adds	r3, #24
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	440b      	add	r3, r1
 8002d58:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e00e      	b.n	8002d7c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e006      	b.n	8002d7c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3724      	adds	r7, #36	@ 0x24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d002      	beq.n	8002da8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d11d      	bne.n	8002de4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3301      	adds	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002de4:	68fb      	ldr	r3, [r7, #12]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e02:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d002      	beq.n	8002e10 <HAL_CAN_ActivateNotification+0x1e>
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d109      	bne.n	8002e24 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6959      	ldr	r1, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e006      	b.n	8002e32 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	60d3      	str	r3, [r2, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	f003 0307 	and.w	r3, r3, #7
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	@ (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	@ (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	@ 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	@ 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f7ff ff8e 	bl	8002ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff47 	bl	8002e40 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff5c 	bl	8002e88 <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff8e 	bl	8002ef8 <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5d 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ffb0 	bl	8002f60 <SysTick_Config>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e16b      	b.n	8003300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 815a 	bne.w	80032fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305a:	2b02      	cmp	r3, #2
 800305c:	d130      	bne.n	80030c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 0201 	and.w	r2, r3, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d017      	beq.n	80030fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80b4 	beq.w	80032fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b60      	ldr	r3, [pc, #384]	@ (8003318 <HAL_GPIO_Init+0x30c>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	4a5f      	ldr	r2, [pc, #380]	@ (8003318 <HAL_GPIO_Init+0x30c>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003318 <HAL_GPIO_Init+0x30c>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ae:	4a5b      	ldr	r2, [pc, #364]	@ (800331c <HAL_GPIO_Init+0x310>)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a52      	ldr	r2, [pc, #328]	@ (8003320 <HAL_GPIO_Init+0x314>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02b      	beq.n	8003232 <HAL_GPIO_Init+0x226>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a51      	ldr	r2, [pc, #324]	@ (8003324 <HAL_GPIO_Init+0x318>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d025      	beq.n	800322e <HAL_GPIO_Init+0x222>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a50      	ldr	r2, [pc, #320]	@ (8003328 <HAL_GPIO_Init+0x31c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <HAL_GPIO_Init+0x21e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4f      	ldr	r2, [pc, #316]	@ (800332c <HAL_GPIO_Init+0x320>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d019      	beq.n	8003226 <HAL_GPIO_Init+0x21a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003330 <HAL_GPIO_Init+0x324>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0x216>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003334 <HAL_GPIO_Init+0x328>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00d      	beq.n	800321e <HAL_GPIO_Init+0x212>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4c      	ldr	r2, [pc, #304]	@ (8003338 <HAL_GPIO_Init+0x32c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <HAL_GPIO_Init+0x20e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4b      	ldr	r2, [pc, #300]	@ (800333c <HAL_GPIO_Init+0x330>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_GPIO_Init+0x20a>
 8003212:	2307      	movs	r3, #7
 8003214:	e00e      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003216:	2308      	movs	r3, #8
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800321a:	2306      	movs	r3, #6
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	@ (800331c <HAL_GPIO_Init+0x310>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b3b      	ldr	r3, [pc, #236]	@ (8003340 <HAL_GPIO_Init+0x334>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003276:	4a32      	ldr	r2, [pc, #200]	@ (8003340 <HAL_GPIO_Init+0x334>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800327c:	4b30      	ldr	r3, [pc, #192]	@ (8003340 <HAL_GPIO_Init+0x334>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a0:	4a27      	ldr	r2, [pc, #156]	@ (8003340 <HAL_GPIO_Init+0x334>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a6:	4b26      	ldr	r3, [pc, #152]	@ (8003340 <HAL_GPIO_Init+0x334>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003340 <HAL_GPIO_Init+0x334>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_GPIO_Init+0x334>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f4:	4a12      	ldr	r2, [pc, #72]	@ (8003340 <HAL_GPIO_Init+0x334>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f ae90 	bls.w	8003028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	@ 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40020800 	.word	0x40020800
 800332c:	40020c00 	.word	0x40020c00
 8003330:	40021000 	.word	0x40021000
 8003334:	40021400 	.word	0x40021400
 8003338:	40021800 	.word	0x40021800
 800333c:	40021c00 	.word	0x40021c00
 8003340:	40013c00 	.word	0x40013c00

08003344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e267      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d075      	beq.n	800344e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003362:	4b88      	ldr	r3, [pc, #544]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b04      	cmp	r3, #4
 800336c:	d00c      	beq.n	8003388 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4b85      	ldr	r3, [pc, #532]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003376:	2b08      	cmp	r3, #8
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b82      	ldr	r3, [pc, #520]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b7e      	ldr	r3, [pc, #504]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05b      	beq.n	800344c <HAL_RCC_OscConfig+0x108>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d157      	bne.n	800344c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e242      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x74>
 80033aa:	4b76      	ldr	r3, [pc, #472]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a75      	ldr	r2, [pc, #468]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x98>
 80033c2:	4b70      	ldr	r3, [pc, #448]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033dc:	4b69      	ldr	r3, [pc, #420]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a68      	ldr	r2, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b66      	ldr	r3, [pc, #408]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a65      	ldr	r2, [pc, #404]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fdfe 	bl	8001ffc <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fdfa 	bl	8001ffc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	@ 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e207      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b5b      	ldr	r3, [pc, #364]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xc0>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fdea 	bl	8001ffc <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fde6 	bl	8001ffc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1f3      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b51      	ldr	r3, [pc, #324]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0xe8>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d063      	beq.n	8003522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800345a:	4b4a      	ldr	r3, [pc, #296]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b44      	ldr	r3, [pc, #272]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b41      	ldr	r3, [pc, #260]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1c7      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b3b      	ldr	r3, [pc, #236]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4937      	ldr	r1, [pc, #220]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b34      	ldr	r3, [pc, #208]	@ (8003588 <HAL_RCC_OscConfig+0x244>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fe fd9f 	bl	8001ffc <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fe fd9b 	bl	8001ffc <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1a8      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b28      	ldr	r3, [pc, #160]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4925      	ldr	r1, [pc, #148]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_RCC_OscConfig+0x244>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fd7e 	bl	8001ffc <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe fd7a 	bl	8001ffc <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e187      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d036      	beq.n	800359c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <HAL_RCC_OscConfig+0x248>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fd5e 	bl	8001ffc <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe fd5a 	bl	8001ffc <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e167      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_RCC_OscConfig+0x240>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x200>
 8003562:	e01b      	b.n	800359c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_RCC_OscConfig+0x248>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe fd47 	bl	8001ffc <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	e00e      	b.n	8003590 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003572:	f7fe fd43 	bl	8001ffc <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d907      	bls.n	8003590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e150      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
 8003584:	40023800 	.word	0x40023800
 8003588:	42470000 	.word	0x42470000
 800358c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b88      	ldr	r3, [pc, #544]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ea      	bne.n	8003572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8097 	beq.w	80036d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b81      	ldr	r3, [pc, #516]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	4b7d      	ldr	r3, [pc, #500]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	4a7c      	ldr	r2, [pc, #496]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ca:	4b7a      	ldr	r3, [pc, #488]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b77      	ldr	r3, [pc, #476]	@ (80037b8 <HAL_RCC_OscConfig+0x474>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b74      	ldr	r3, [pc, #464]	@ (80037b8 <HAL_RCC_OscConfig+0x474>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a73      	ldr	r2, [pc, #460]	@ (80037b8 <HAL_RCC_OscConfig+0x474>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fd03 	bl	8001ffc <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fe fcff 	bl	8001ffc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e10c      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b6a      	ldr	r3, [pc, #424]	@ (80037b8 <HAL_RCC_OscConfig+0x474>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x2ea>
 8003620:	4b64      	ldr	r3, [pc, #400]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003624:	4a63      	ldr	r2, [pc, #396]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	@ 0x70
 800362c:	e01c      	b.n	8003668 <HAL_RCC_OscConfig+0x324>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b05      	cmp	r3, #5
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x30c>
 8003636:	4b5f      	ldr	r3, [pc, #380]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	4a5e      	ldr	r2, [pc, #376]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	@ 0x70
 8003642:	4b5c      	ldr	r3, [pc, #368]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a5b      	ldr	r2, [pc, #364]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0x324>
 8003650:	4b58      	ldr	r3, [pc, #352]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a57      	ldr	r2, [pc, #348]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	4b55      	ldr	r3, [pc, #340]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003660:	4a54      	ldr	r2, [pc, #336]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 0304 	bic.w	r3, r3, #4
 8003666:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe fcc4 	bl	8001ffc <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fe fcc0 	bl	8001ffc <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0cb      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	4b49      	ldr	r3, [pc, #292]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ee      	beq.n	8003678 <HAL_RCC_OscConfig+0x334>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fe fcae 	bl	8001ffc <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fe fcaa 	bl	8001ffc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0b5      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ba:	4b3e      	ldr	r3, [pc, #248]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ee      	bne.n	80036a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036cc:	4b39      	ldr	r3, [pc, #228]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	4a38      	ldr	r2, [pc, #224]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a1 	beq.w	8003824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e2:	4b34      	ldr	r3, [pc, #208]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d05c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d141      	bne.n	800377a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b31      	ldr	r3, [pc, #196]	@ (80037bc <HAL_RCC_OscConfig+0x478>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe fc7e 	bl	8001ffc <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7fe fc7a 	bl	8001ffc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e087      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b27      	ldr	r3, [pc, #156]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	491b      	ldr	r1, [pc, #108]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374c:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x478>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe fc53 	bl	8001ffc <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe fc4f 	bl	8001ffc <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e05c      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376c:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x416>
 8003778:	e054      	b.n	8003824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377a:	4b10      	ldr	r3, [pc, #64]	@ (80037bc <HAL_RCC_OscConfig+0x478>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fc3c 	bl	8001ffc <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fc38 	bl	8001ffc <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e045      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_RCC_OscConfig+0x470>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x444>
 80037a6:	e03d      	b.n	8003824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e038      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40007000 	.word	0x40007000
 80037bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <HAL_RCC_OscConfig+0x4ec>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d028      	beq.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d121      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d11a      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d111      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0cc      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b68      	ldr	r3, [pc, #416]	@ (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d90c      	bls.n	8003870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b65      	ldr	r3, [pc, #404]	@ (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b63      	ldr	r3, [pc, #396]	@ (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0b8      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003888:	4b59      	ldr	r3, [pc, #356]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a58      	ldr	r2, [pc, #352]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003892:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a0:	4b53      	ldr	r3, [pc, #332]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a52      	ldr	r2, [pc, #328]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b50      	ldr	r3, [pc, #320]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	494d      	ldr	r1, [pc, #308]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d044      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d119      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e07f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b3f      	ldr	r3, [pc, #252]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e067      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b37      	ldr	r3, [pc, #220]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4934      	ldr	r1, [pc, #208]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fe fb6a 	bl	8001ffc <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fe fb66 	bl	8001ffc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e04f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d20c      	bcs.n	800397c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b22      	ldr	r3, [pc, #136]	@ (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b20      	ldr	r3, [pc, #128]	@ (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e032      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003988:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4916      	ldr	r1, [pc, #88]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a6:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	490e      	ldr	r1, [pc, #56]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ba:	f000 f821 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 80039be:	4602      	mov	r2, r0
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	490a      	ldr	r1, [pc, #40]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	5ccb      	ldrb	r3, [r1, r3]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	4a09      	ldr	r2, [pc, #36]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe faca 	bl	8001f74 <HAL_InitTick>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08005058 	.word	0x08005058
 80039f8:	20000010 	.word	0x20000010
 80039fc:	20000014 	.word	0x20000014

08003a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a04:	b090      	sub	sp, #64	@ 0x40
 8003a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a18:	4b59      	ldr	r3, [pc, #356]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d00d      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x40>
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	f200 80a1 	bhi.w	8003b6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x34>
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a32:	e09b      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b53      	ldr	r3, [pc, #332]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a38:	e09b      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3a:	4b53      	ldr	r3, [pc, #332]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a3e:	e098      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a40:	4b4f      	ldr	r3, [pc, #316]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d028      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a56:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a6c:	fb03 f201 	mul.w	r2, r3, r1
 8003a70:	2300      	movs	r3, #0
 8003a72:	fb00 f303 	mul.w	r3, r0, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	4a43      	ldr	r2, [pc, #268]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a80:	460a      	mov	r2, r1
 8003a82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a86:	4413      	add	r3, r2
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	61fa      	str	r2, [r7, #28]
 8003a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a9a:	f7fd f863 	bl	8000b64 <__aeabi_uldivmod>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa6:	e053      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa8:	4b35      	ldr	r3, [pc, #212]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	2200      	movs	r2, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	617a      	str	r2, [r7, #20]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aba:	f04f 0b00 	mov.w	fp, #0
 8003abe:	4652      	mov	r2, sl
 8003ac0:	465b      	mov	r3, fp
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	0159      	lsls	r1, r3, #5
 8003acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad0:	0150      	lsls	r0, r2, #5
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	ebb2 080a 	subs.w	r8, r2, sl
 8003ada:	eb63 090b 	sbc.w	r9, r3, fp
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003aee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003af2:	ebb2 0408 	subs.w	r4, r2, r8
 8003af6:	eb63 0509 	sbc.w	r5, r3, r9
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	00eb      	lsls	r3, r5, #3
 8003b04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b08:	00e2      	lsls	r2, r4, #3
 8003b0a:	4614      	mov	r4, r2
 8003b0c:	461d      	mov	r5, r3
 8003b0e:	eb14 030a 	adds.w	r3, r4, sl
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	eb45 030b 	adc.w	r3, r5, fp
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b26:	4629      	mov	r1, r5
 8003b28:	028b      	lsls	r3, r1, #10
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b30:	4621      	mov	r1, r4
 8003b32:	028a      	lsls	r2, r1, #10
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	60fa      	str	r2, [r7, #12]
 8003b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b44:	f7fd f80e 	bl	8000b64 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b6a:	e002      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3740      	adds	r7, #64	@ 0x40
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
 8003b84:	00f42400 	.word	0x00f42400
 8003b88:	017d7840 	.word	0x017d7840

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000010 	.word	0x20000010

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ba8:	f7ff fff0 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0a9b      	lsrs	r3, r3, #10
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	@ (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08005068 	.word	0x08005068

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bd0:	f7ff ffdc 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0b5b      	lsrs	r3, r3, #13
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	@ (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08005068 	.word	0x08005068

08003bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e041      	b.n	8003c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe f878 	bl	8001d10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 f9b8 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_TIM_PWM_Start+0x24>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e022      	b.n	8003cfe <HAL_TIM_PWM_Start+0x6a>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d109      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0x3e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e015      	b.n	8003cfe <HAL_TIM_PWM_Start+0x6a>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d109      	bne.n	8003cec <HAL_TIM_PWM_Start+0x58>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e008      	b.n	8003cfe <HAL_TIM_PWM_Start+0x6a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07c      	b.n	8003e00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Start+0x82>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d14:	e013      	b.n	8003d3e <HAL_TIM_PWM_Start+0xaa>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x92>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d24:	e00b      	b.n	8003d3e <HAL_TIM_PWM_Start+0xaa>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start+0xa2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d34:	e003      	b.n	8003d3e <HAL_TIM_PWM_Start+0xaa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2201      	movs	r2, #1
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fb84 	bl	8004454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2d      	ldr	r2, [pc, #180]	@ (8003e08 <HAL_TIM_PWM_Start+0x174>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_PWM_Start+0xcc>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e0c <HAL_TIM_PWM_Start+0x178>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIM_PWM_Start+0xd0>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_TIM_PWM_Start+0xd2>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a22      	ldr	r2, [pc, #136]	@ (8003e08 <HAL_TIM_PWM_Start+0x174>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_TIM_PWM_Start+0x136>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8c:	d01d      	beq.n	8003dca <HAL_TIM_PWM_Start+0x136>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1f      	ldr	r2, [pc, #124]	@ (8003e10 <HAL_TIM_PWM_Start+0x17c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_TIM_PWM_Start+0x136>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <HAL_TIM_PWM_Start+0x180>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_TIM_PWM_Start+0x136>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <HAL_TIM_PWM_Start+0x184>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIM_PWM_Start+0x136>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <HAL_TIM_PWM_Start+0x178>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_TIM_PWM_Start+0x136>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a18      	ldr	r2, [pc, #96]	@ (8003e1c <HAL_TIM_PWM_Start+0x188>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIM_PWM_Start+0x136>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <HAL_TIM_PWM_Start+0x18c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d010      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	e007      	b.n	8003dfe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40010400 	.word	0x40010400
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40001800 	.word	0x40001800

08003e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0ae      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	f200 809f 	bhi.w	8003f90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e52:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e8d 	.word	0x08003e8d
 8003e5c:	08003f91 	.word	0x08003f91
 8003e60:	08003f91 	.word	0x08003f91
 8003e64:	08003f91 	.word	0x08003f91
 8003e68:	08003ecd 	.word	0x08003ecd
 8003e6c:	08003f91 	.word	0x08003f91
 8003e70:	08003f91 	.word	0x08003f91
 8003e74:	08003f91 	.word	0x08003f91
 8003e78:	08003f0f 	.word	0x08003f0f
 8003e7c:	08003f91 	.word	0x08003f91
 8003e80:	08003f91 	.word	0x08003f91
 8003e84:	08003f91 	.word	0x08003f91
 8003e88:	08003f4f 	.word	0x08003f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f92e 	bl	80040f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0208 	orr.w	r2, r2, #8
 8003ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0204 	bic.w	r2, r2, #4
 8003eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6999      	ldr	r1, [r3, #24]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	619a      	str	r2, [r3, #24]
      break;
 8003eca:	e064      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f97e 	bl	80041d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	619a      	str	r2, [r3, #24]
      break;
 8003f0c:	e043      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f9d3 	bl	80042c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0208 	orr.w	r2, r2, #8
 8003f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0204 	bic.w	r2, r2, #4
 8003f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69d9      	ldr	r1, [r3, #28]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]
      break;
 8003f4c:	e023      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa27 	bl	80043a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	021a      	lsls	r2, r3, #8
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	61da      	str	r2, [r3, #28]
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
      break;
 8003f94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a43      	ldr	r2, [pc, #268]	@ (80040c8 <TIM_Base_SetConfig+0x120>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d00f      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a40      	ldr	r2, [pc, #256]	@ (80040cc <TIM_Base_SetConfig+0x124>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80040d0 <TIM_Base_SetConfig+0x128>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3e      	ldr	r2, [pc, #248]	@ (80040d4 <TIM_Base_SetConfig+0x12c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80040d8 <TIM_Base_SetConfig+0x130>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a32      	ldr	r2, [pc, #200]	@ (80040c8 <TIM_Base_SetConfig+0x120>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d02b      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004008:	d027      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2f      	ldr	r2, [pc, #188]	@ (80040cc <TIM_Base_SetConfig+0x124>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d023      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2e      	ldr	r2, [pc, #184]	@ (80040d0 <TIM_Base_SetConfig+0x128>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01f      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2d      	ldr	r2, [pc, #180]	@ (80040d4 <TIM_Base_SetConfig+0x12c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01b      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2c      	ldr	r2, [pc, #176]	@ (80040d8 <TIM_Base_SetConfig+0x130>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d017      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2b      	ldr	r2, [pc, #172]	@ (80040dc <TIM_Base_SetConfig+0x134>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <TIM_Base_SetConfig+0x138>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00f      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a29      	ldr	r2, [pc, #164]	@ (80040e4 <TIM_Base_SetConfig+0x13c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00b      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a28      	ldr	r2, [pc, #160]	@ (80040e8 <TIM_Base_SetConfig+0x140>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a27      	ldr	r2, [pc, #156]	@ (80040ec <TIM_Base_SetConfig+0x144>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <TIM_Base_SetConfig+0x148>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d108      	bne.n	800406c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a0e      	ldr	r2, [pc, #56]	@ (80040c8 <TIM_Base_SetConfig+0x120>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_Base_SetConfig+0xf2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a10      	ldr	r2, [pc, #64]	@ (80040d8 <TIM_Base_SetConfig+0x130>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d103      	bne.n	80040a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800
 80040e8:	40001800 	.word	0x40001800
 80040ec:	40001c00 	.word	0x40001c00
 80040f0:	40002000 	.word	0x40002000

080040f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f023 0201 	bic.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 0302 	bic.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <TIM_OC1_SetConfig+0xd8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC1_SetConfig+0x64>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <TIM_OC1_SetConfig+0xdc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10c      	bne.n	8004172 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0308 	bic.w	r3, r3, #8
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a15      	ldr	r2, [pc, #84]	@ (80041cc <TIM_OC1_SetConfig+0xd8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC1_SetConfig+0x8e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a14      	ldr	r2, [pc, #80]	@ (80041d0 <TIM_OC1_SetConfig+0xdc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d111      	bne.n	80041a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f023 0210 	bic.w	r2, r3, #16
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a22      	ldr	r2, [pc, #136]	@ (80042b8 <TIM_OC2_SetConfig+0xe4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC2_SetConfig+0x68>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a21      	ldr	r2, [pc, #132]	@ (80042bc <TIM_OC2_SetConfig+0xe8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10d      	bne.n	8004258 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a17      	ldr	r2, [pc, #92]	@ (80042b8 <TIM_OC2_SetConfig+0xe4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC2_SetConfig+0x94>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	@ (80042bc <TIM_OC2_SetConfig+0xe8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d113      	bne.n	8004290 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800426e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40010400 	.word	0x40010400

080042c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a21      	ldr	r2, [pc, #132]	@ (80043a0 <TIM_OC3_SetConfig+0xe0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC3_SetConfig+0x66>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a20      	ldr	r2, [pc, #128]	@ (80043a4 <TIM_OC3_SetConfig+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10d      	bne.n	8004342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <TIM_OC3_SetConfig+0xe0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_OC3_SetConfig+0x92>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a15      	ldr	r2, [pc, #84]	@ (80043a4 <TIM_OC3_SetConfig+0xe4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d113      	bne.n	800437a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40010400 	.word	0x40010400

080043a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	031b      	lsls	r3, r3, #12
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a12      	ldr	r2, [pc, #72]	@ (800444c <TIM_OC4_SetConfig+0xa4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_OC4_SetConfig+0x68>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a11      	ldr	r2, [pc, #68]	@ (8004450 <TIM_OC4_SetConfig+0xa8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d109      	bne.n	8004424 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	019b      	lsls	r3, r3, #6
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40010400 	.word	0x40010400

08004454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2201      	movs	r2, #1
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1a      	ldr	r2, [r3, #32]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	43db      	mvns	r3, r3
 8004476:	401a      	ands	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e05a      	b.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a21      	ldr	r2, [pc, #132]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004504:	d01d      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1d      	ldr	r2, [pc, #116]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1b      	ldr	r2, [pc, #108]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1a      	ldr	r2, [pc, #104]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a17      	ldr	r2, [pc, #92]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10c      	bne.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4313      	orrs	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40010400 	.word	0x40010400
 8004590:	40014000 	.word	0x40014000
 8004594:	40001800 	.word	0x40001800

08004598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e03d      	b.n	8004630 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e042      	b.n	80046d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fd fbb0 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2224      	movs	r2, #36	@ 0x24
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800467e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f82b 	bl	80046dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e0:	b0c0      	sub	sp, #256	@ 0x100
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	68d9      	ldr	r1, [r3, #12]
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	ea40 0301 	orr.w	r3, r0, r1
 8004704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	431a      	orrs	r2, r3
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004734:	f021 010c 	bic.w	r1, r1, #12
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004742:	430b      	orrs	r3, r1
 8004744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004756:	6999      	ldr	r1, [r3, #24]
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	ea40 0301 	orr.w	r3, r0, r1
 8004762:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b8f      	ldr	r3, [pc, #572]	@ (80049a8 <UART_SetConfig+0x2cc>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d005      	beq.n	800477c <UART_SetConfig+0xa0>
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b8d      	ldr	r3, [pc, #564]	@ (80049ac <UART_SetConfig+0x2d0>)
 8004778:	429a      	cmp	r2, r3
 800477a:	d104      	bne.n	8004786 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7ff fa26 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8004780:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004784:	e003      	b.n	800478e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004786:	f7ff fa0d 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 800478a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004798:	f040 810c 	bne.w	80049b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047b6:	415b      	adcs	r3, r3
 80047b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047be:	4621      	mov	r1, r4
 80047c0:	eb12 0801 	adds.w	r8, r2, r1
 80047c4:	4629      	mov	r1, r5
 80047c6:	eb43 0901 	adc.w	r9, r3, r1
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047de:	4690      	mov	r8, r2
 80047e0:	4699      	mov	r9, r3
 80047e2:	4623      	mov	r3, r4
 80047e4:	eb18 0303 	adds.w	r3, r8, r3
 80047e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047ec:	462b      	mov	r3, r5
 80047ee:	eb49 0303 	adc.w	r3, r9, r3
 80047f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004802:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800480a:	460b      	mov	r3, r1
 800480c:	18db      	adds	r3, r3, r3
 800480e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004810:	4613      	mov	r3, r2
 8004812:	eb42 0303 	adc.w	r3, r2, r3
 8004816:	657b      	str	r3, [r7, #84]	@ 0x54
 8004818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800481c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004820:	f7fc f9a0 	bl	8000b64 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4b61      	ldr	r3, [pc, #388]	@ (80049b0 <UART_SetConfig+0x2d4>)
 800482a:	fba3 2302 	umull	r2, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	011c      	lsls	r4, r3, #4
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800483c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800484c:	415b      	adcs	r3, r3
 800484e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004854:	4641      	mov	r1, r8
 8004856:	eb12 0a01 	adds.w	sl, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb43 0b01 	adc.w	fp, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800486c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004874:	4692      	mov	sl, r2
 8004876:	469b      	mov	fp, r3
 8004878:	4643      	mov	r3, r8
 800487a:	eb1a 0303 	adds.w	r3, sl, r3
 800487e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004882:	464b      	mov	r3, r9
 8004884:	eb4b 0303 	adc.w	r3, fp, r3
 8004888:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004898:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800489c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048a0:	460b      	mov	r3, r1
 80048a2:	18db      	adds	r3, r3, r3
 80048a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a6:	4613      	mov	r3, r2
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048b6:	f7fc f955 	bl	8000b64 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	4b3b      	ldr	r3, [pc, #236]	@ (80049b0 <UART_SetConfig+0x2d4>)
 80048c2:	fba3 2301 	umull	r2, r3, r3, r1
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2264      	movs	r2, #100	@ 0x64
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	1acb      	subs	r3, r1, r3
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048d6:	4b36      	ldr	r3, [pc, #216]	@ (80049b0 <UART_SetConfig+0x2d4>)
 80048d8:	fba3 2302 	umull	r2, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048e4:	441c      	add	r4, r3
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004900:	415b      	adcs	r3, r3
 8004902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004908:	4641      	mov	r1, r8
 800490a:	1851      	adds	r1, r2, r1
 800490c:	6339      	str	r1, [r7, #48]	@ 0x30
 800490e:	4649      	mov	r1, r9
 8004910:	414b      	adcs	r3, r1
 8004912:	637b      	str	r3, [r7, #52]	@ 0x34
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004920:	4659      	mov	r1, fp
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4651      	mov	r1, sl
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4642      	mov	r2, r8
 8004936:	189b      	adds	r3, r3, r2
 8004938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800493c:	464b      	mov	r3, r9
 800493e:	460a      	mov	r2, r1
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004954:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800495c:	460b      	mov	r3, r1
 800495e:	18db      	adds	r3, r3, r3
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004962:	4613      	mov	r3, r2
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800496e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004972:	f7fc f8f7 	bl	8000b64 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <UART_SetConfig+0x2d4>)
 800497c:	fba3 1302 	umull	r1, r3, r3, r2
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	2164      	movs	r1, #100	@ 0x64
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	3332      	adds	r3, #50	@ 0x32
 800498e:	4a08      	ldr	r2, [pc, #32]	@ (80049b0 <UART_SetConfig+0x2d4>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	f003 0207 	and.w	r2, r3, #7
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a4:	e106      	b.n	8004bb4 <UART_SetConfig+0x4d8>
 80049a6:	bf00      	nop
 80049a8:	40011000 	.word	0x40011000
 80049ac:	40011400 	.word	0x40011400
 80049b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049c6:	4642      	mov	r2, r8
 80049c8:	464b      	mov	r3, r9
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	6239      	str	r1, [r7, #32]
 80049ce:	415b      	adcs	r3, r3
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d6:	4641      	mov	r1, r8
 80049d8:	1854      	adds	r4, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb43 0501 	adc.w	r5, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	00eb      	lsls	r3, r5, #3
 80049ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ee:	00e2      	lsls	r2, r4, #3
 80049f0:	4614      	mov	r4, r2
 80049f2:	461d      	mov	r5, r3
 80049f4:	4643      	mov	r3, r8
 80049f6:	18e3      	adds	r3, r4, r3
 80049f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049fc:	464b      	mov	r3, r9
 80049fe:	eb45 0303 	adc.w	r3, r5, r3
 8004a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a22:	4629      	mov	r1, r5
 8004a24:	008b      	lsls	r3, r1, #2
 8004a26:	4621      	mov	r1, r4
 8004a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	008a      	lsls	r2, r1, #2
 8004a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a34:	f7fc f896 	bl	8000b64 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4b60      	ldr	r3, [pc, #384]	@ (8004bc0 <UART_SetConfig+0x4e4>)
 8004a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	011c      	lsls	r4, r3, #4
 8004a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	61b9      	str	r1, [r7, #24]
 8004a60:	415b      	adcs	r3, r3
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a68:	4641      	mov	r1, r8
 8004a6a:	1851      	adds	r1, r2, r1
 8004a6c:	6139      	str	r1, [r7, #16]
 8004a6e:	4649      	mov	r1, r9
 8004a70:	414b      	adcs	r3, r1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a80:	4659      	mov	r1, fp
 8004a82:	00cb      	lsls	r3, r1, #3
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	00ca      	lsls	r2, r1, #3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	4642      	mov	r2, r8
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ab2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	008b      	lsls	r3, r1, #2
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aca:	4641      	mov	r1, r8
 8004acc:	008a      	lsls	r2, r1, #2
 8004ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ad2:	f7fc f847 	bl	8000b64 <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	4b38      	ldr	r3, [pc, #224]	@ (8004bc0 <UART_SetConfig+0x4e4>)
 8004ade:	fba3 2301 	umull	r2, r3, r3, r1
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2264      	movs	r2, #100	@ 0x64
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	1acb      	subs	r3, r1, r3
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	3332      	adds	r3, #50	@ 0x32
 8004af0:	4a33      	ldr	r2, [pc, #204]	@ (8004bc0 <UART_SetConfig+0x4e4>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004afc:	441c      	add	r4, r3
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b02:	2200      	movs	r2, #0
 8004b04:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b06:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	415b      	adcs	r3, r3
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	1851      	adds	r1, r2, r1
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	4649      	mov	r1, r9
 8004b24:	414b      	adcs	r3, r1
 8004b26:	607b      	str	r3, [r7, #4]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b34:	4659      	mov	r1, fp
 8004b36:	00cb      	lsls	r3, r1, #3
 8004b38:	4651      	mov	r1, sl
 8004b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3e:	4651      	mov	r1, sl
 8004b40:	00ca      	lsls	r2, r1, #3
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	4642      	mov	r2, r8
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b4e:	464b      	mov	r3, r9
 8004b50:	460a      	mov	r2, r1
 8004b52:	eb42 0303 	adc.w	r3, r2, r3
 8004b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b62:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b70:	4649      	mov	r1, r9
 8004b72:	008b      	lsls	r3, r1, #2
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	008a      	lsls	r2, r1, #2
 8004b7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b82:	f7fb ffef 	bl	8000b64 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <UART_SetConfig+0x4e4>)
 8004b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	2164      	movs	r1, #100	@ 0x64
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	3332      	adds	r3, #50	@ 0x32
 8004b9e:	4a08      	ldr	r2, [pc, #32]	@ (8004bc0 <UART_SetConfig+0x4e4>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4422      	add	r2, r4
 8004bb2:	609a      	str	r2, [r3, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc0:	51eb851f 	.word	0x51eb851f

08004bc4 <memset>:
 8004bc4:	4402      	add	r2, r0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d100      	bne.n	8004bce <memset+0xa>
 8004bcc:	4770      	bx	lr
 8004bce:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd2:	e7f9      	b.n	8004bc8 <memset+0x4>

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	@ (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	2000001c 	.word	0x2000001c

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c18 <__libc_init_array+0x38>)
 8004be4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c1c <__libc_init_array+0x3c>)
 8004be6:	1b64      	subs	r4, r4, r5
 8004be8:	10a4      	asrs	r4, r4, #2
 8004bea:	2600      	movs	r6, #0
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8004c20 <__libc_init_array+0x40>)
 8004bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8004c24 <__libc_init_array+0x44>)
 8004bf4:	f000 fa24 	bl	8005040 <_init>
 8004bf8:	1b64      	subs	r4, r4, r5
 8004bfa:	10a4      	asrs	r4, r4, #2
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	080050a8 	.word	0x080050a8
 8004c1c:	080050a8 	.word	0x080050a8
 8004c20:	080050a8 	.word	0x080050a8
 8004c24:	080050ac 	.word	0x080050ac

08004c28 <exp>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	ed2d 8b02 	vpush	{d8}
 8004c2e:	ec55 4b10 	vmov	r4, r5, d0
 8004c32:	f000 f84d 	bl	8004cd0 <__ieee754_exp>
 8004c36:	eeb0 8a40 	vmov.f32	s16, s0
 8004c3a:	eef0 8a60 	vmov.f32	s17, s1
 8004c3e:	ec45 4b10 	vmov	d0, r4, r5
 8004c42:	f000 f839 	bl	8004cb8 <finite>
 8004c46:	b168      	cbz	r0, 8004c64 <exp+0x3c>
 8004c48:	a317      	add	r3, pc, #92	@ (adr r3, 8004ca8 <exp+0x80>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	4620      	mov	r0, r4
 8004c50:	4629      	mov	r1, r5
 8004c52:	f7fb ff05 	bl	8000a60 <__aeabi_dcmpgt>
 8004c56:	b160      	cbz	r0, 8004c72 <exp+0x4a>
 8004c58:	f7ff ffbc 	bl	8004bd4 <__errno>
 8004c5c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8004c98 <exp+0x70>
 8004c60:	2322      	movs	r3, #34	@ 0x22
 8004c62:	6003      	str	r3, [r0, #0]
 8004c64:	eeb0 0a48 	vmov.f32	s0, s16
 8004c68:	eef0 0a68 	vmov.f32	s1, s17
 8004c6c:	ecbd 8b02 	vpop	{d8}
 8004c70:	bd38      	pop	{r3, r4, r5, pc}
 8004c72:	a30f      	add	r3, pc, #60	@ (adr r3, 8004cb0 <exp+0x88>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	4620      	mov	r0, r4
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f7fb fed2 	bl	8000a24 <__aeabi_dcmplt>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d0ef      	beq.n	8004c64 <exp+0x3c>
 8004c84:	f7ff ffa6 	bl	8004bd4 <__errno>
 8004c88:	2322      	movs	r3, #34	@ 0x22
 8004c8a:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8004ca0 <exp+0x78>
 8004c8e:	6003      	str	r3, [r0, #0]
 8004c90:	e7e8      	b.n	8004c64 <exp+0x3c>
 8004c92:	bf00      	nop
 8004c94:	f3af 8000 	nop.w
 8004c98:	00000000 	.word	0x00000000
 8004c9c:	7ff00000 	.word	0x7ff00000
	...
 8004ca8:	fefa39ef 	.word	0xfefa39ef
 8004cac:	40862e42 	.word	0x40862e42
 8004cb0:	d52d3051 	.word	0xd52d3051
 8004cb4:	c0874910 	.word	0xc0874910

08004cb8 <finite>:
 8004cb8:	b082      	sub	sp, #8
 8004cba:	ed8d 0b00 	vstr	d0, [sp]
 8004cbe:	9801      	ldr	r0, [sp, #4]
 8004cc0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004cc4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004cc8:	0fc0      	lsrs	r0, r0, #31
 8004cca:	b002      	add	sp, #8
 8004ccc:	4770      	bx	lr
	...

08004cd0 <__ieee754_exp>:
 8004cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	ec55 4b10 	vmov	r4, r5, d0
 8004cd8:	49b1      	ldr	r1, [pc, #708]	@ (8004fa0 <__ieee754_exp+0x2d0>)
 8004cda:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004cde:	428a      	cmp	r2, r1
 8004ce0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8004ce4:	d936      	bls.n	8004d54 <__ieee754_exp+0x84>
 8004ce6:	49af      	ldr	r1, [pc, #700]	@ (8004fa4 <__ieee754_exp+0x2d4>)
 8004ce8:	428a      	cmp	r2, r1
 8004cea:	d914      	bls.n	8004d16 <__ieee754_exp+0x46>
 8004cec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004cf0:	4323      	orrs	r3, r4
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	d007      	beq.n	8004d06 <__ieee754_exp+0x36>
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f7fb fa6a 	bl	80001d4 <__adddf3>
 8004d00:	4604      	mov	r4, r0
 8004d02:	460d      	mov	r5, r1
 8004d04:	e002      	b.n	8004d0c <__ieee754_exp+0x3c>
 8004d06:	2e00      	cmp	r6, #0
 8004d08:	f040 8118 	bne.w	8004f3c <__ieee754_exp+0x26c>
 8004d0c:	ec45 4b10 	vmov	d0, r4, r5
 8004d10:	b004      	add	sp, #16
 8004d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d16:	a38c      	add	r3, pc, #560	@ (adr r3, 8004f48 <__ieee754_exp+0x278>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb fe9e 	bl	8000a60 <__aeabi_dcmpgt>
 8004d24:	4607      	mov	r7, r0
 8004d26:	b128      	cbz	r0, 8004d34 <__ieee754_exp+0x64>
 8004d28:	2000      	movs	r0, #0
 8004d2a:	b004      	add	sp, #16
 8004d2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	f000 b97e 	b.w	8005030 <__math_oflow>
 8004d34:	a386      	add	r3, pc, #536	@ (adr r3, 8004f50 <__ieee754_exp+0x280>)
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	f7fb fe71 	bl	8000a24 <__aeabi_dcmplt>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f000 8087 	beq.w	8004e56 <__ieee754_exp+0x186>
 8004d48:	4638      	mov	r0, r7
 8004d4a:	b004      	add	sp, #16
 8004d4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	f000 b966 	b.w	8005020 <__math_uflow>
 8004d54:	4b94      	ldr	r3, [pc, #592]	@ (8004fa8 <__ieee754_exp+0x2d8>)
 8004d56:	429a      	cmp	r2, r3
 8004d58:	f240 80a9 	bls.w	8004eae <__ieee754_exp+0x1de>
 8004d5c:	4b93      	ldr	r3, [pc, #588]	@ (8004fac <__ieee754_exp+0x2dc>)
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d879      	bhi.n	8004e56 <__ieee754_exp+0x186>
 8004d62:	4b93      	ldr	r3, [pc, #588]	@ (8004fb0 <__ieee754_exp+0x2e0>)
 8004d64:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f7fb fa2e 	bl	80001d0 <__aeabi_dsub>
 8004d74:	4b8f      	ldr	r3, [pc, #572]	@ (8004fb4 <__ieee754_exp+0x2e4>)
 8004d76:	00f7      	lsls	r7, r6, #3
 8004d78:	443b      	add	r3, r7
 8004d7a:	ed93 7b00 	vldr	d7, [r3]
 8004d7e:	ed8d 7b00 	vstr	d7, [sp]
 8004d82:	f086 0a01 	eor.w	sl, r6, #1
 8004d86:	4680      	mov	r8, r0
 8004d88:	4689      	mov	r9, r1
 8004d8a:	ebaa 0a06 	sub.w	sl, sl, r6
 8004d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d92:	4640      	mov	r0, r8
 8004d94:	4649      	mov	r1, r9
 8004d96:	f7fb fa1b 	bl	80001d0 <__aeabi_dsub>
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb fbcb 	bl	8000540 <__aeabi_dmul>
 8004daa:	a36b      	add	r3, pc, #428	@ (adr r3, 8004f58 <__ieee754_exp+0x288>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	4606      	mov	r6, r0
 8004db2:	460f      	mov	r7, r1
 8004db4:	f7fb fbc4 	bl	8000540 <__aeabi_dmul>
 8004db8:	a369      	add	r3, pc, #420	@ (adr r3, 8004f60 <__ieee754_exp+0x290>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fa07 	bl	80001d0 <__aeabi_dsub>
 8004dc2:	4632      	mov	r2, r6
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	f7fb fbbb 	bl	8000540 <__aeabi_dmul>
 8004dca:	a367      	add	r3, pc, #412	@ (adr r3, 8004f68 <__ieee754_exp+0x298>)
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f7fb fa00 	bl	80001d4 <__adddf3>
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	f7fb fbb2 	bl	8000540 <__aeabi_dmul>
 8004ddc:	a364      	add	r3, pc, #400	@ (adr r3, 8004f70 <__ieee754_exp+0x2a0>)
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	f7fb f9f5 	bl	80001d0 <__aeabi_dsub>
 8004de6:	4632      	mov	r2, r6
 8004de8:	463b      	mov	r3, r7
 8004dea:	f7fb fba9 	bl	8000540 <__aeabi_dmul>
 8004dee:	a362      	add	r3, pc, #392	@ (adr r3, 8004f78 <__ieee754_exp+0x2a8>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb f9ee 	bl	80001d4 <__adddf3>
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	f7fb fba0 	bl	8000540 <__aeabi_dmul>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4620      	mov	r0, r4
 8004e06:	4629      	mov	r1, r5
 8004e08:	f7fb f9e2 	bl	80001d0 <__aeabi_dsub>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4606      	mov	r6, r0
 8004e12:	460f      	mov	r7, r1
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fb92 	bl	8000540 <__aeabi_dmul>
 8004e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e20:	f1ba 0f00 	cmp.w	sl, #0
 8004e24:	d15c      	bne.n	8004ee0 <__ieee754_exp+0x210>
 8004e26:	2200      	movs	r2, #0
 8004e28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	4639      	mov	r1, r7
 8004e30:	f7fb f9ce 	bl	80001d0 <__aeabi_dsub>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e3c:	f7fb fcaa 	bl	8000794 <__aeabi_ddiv>
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	f7fb f9c4 	bl	80001d0 <__aeabi_dsub>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	495a      	ldr	r1, [pc, #360]	@ (8004fb8 <__ieee754_exp+0x2e8>)
 8004e50:	f7fb f9be 	bl	80001d0 <__aeabi_dsub>
 8004e54:	e754      	b.n	8004d00 <__ieee754_exp+0x30>
 8004e56:	4b59      	ldr	r3, [pc, #356]	@ (8004fbc <__ieee754_exp+0x2ec>)
 8004e58:	4620      	mov	r0, r4
 8004e5a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004e5e:	4629      	mov	r1, r5
 8004e60:	a347      	add	r3, pc, #284	@ (adr r3, 8004f80 <__ieee754_exp+0x2b0>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb fb6b 	bl	8000540 <__aeabi_dmul>
 8004e6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e6e:	f7fb f9b1 	bl	80001d4 <__adddf3>
 8004e72:	f7fb fdff 	bl	8000a74 <__aeabi_d2iz>
 8004e76:	4682      	mov	sl, r0
 8004e78:	f7fb faf8 	bl	800046c <__aeabi_i2d>
 8004e7c:	a342      	add	r3, pc, #264	@ (adr r3, 8004f88 <__ieee754_exp+0x2b8>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	4606      	mov	r6, r0
 8004e84:	460f      	mov	r7, r1
 8004e86:	f7fb fb5b 	bl	8000540 <__aeabi_dmul>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	f7fb f99d 	bl	80001d0 <__aeabi_dsub>
 8004e96:	a33e      	add	r3, pc, #248	@ (adr r3, 8004f90 <__ieee754_exp+0x2c0>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	4689      	mov	r9, r1
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	f7fb fb4c 	bl	8000540 <__aeabi_dmul>
 8004ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8004eac:	e76f      	b.n	8004d8e <__ieee754_exp+0xbe>
 8004eae:	4b44      	ldr	r3, [pc, #272]	@ (8004fc0 <__ieee754_exp+0x2f0>)
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d810      	bhi.n	8004ed6 <__ieee754_exp+0x206>
 8004eb4:	a338      	add	r3, pc, #224	@ (adr r3, 8004f98 <__ieee754_exp+0x2c8>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	4620      	mov	r0, r4
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f7fb f989 	bl	80001d4 <__adddf3>
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb8 <__ieee754_exp+0x2e8>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f7fb fdcb 	bl	8000a60 <__aeabi_dcmpgt>
 8004eca:	b138      	cbz	r0, 8004edc <__ieee754_exp+0x20c>
 8004ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb8 <__ieee754_exp+0x2e8>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	e712      	b.n	8004cfc <__ieee754_exp+0x2c>
 8004ed6:	f04f 0a00 	mov.w	sl, #0
 8004eda:	e760      	b.n	8004d9e <__ieee754_exp+0xce>
 8004edc:	4682      	mov	sl, r0
 8004ede:	e75e      	b.n	8004d9e <__ieee754_exp+0xce>
 8004ee0:	4632      	mov	r2, r6
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004eea:	f7fb f971 	bl	80001d0 <__aeabi_dsub>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef6:	f7fb fc4d 	bl	8000794 <__aeabi_ddiv>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f02:	f7fb f965 	bl	80001d0 <__aeabi_dsub>
 8004f06:	4642      	mov	r2, r8
 8004f08:	464b      	mov	r3, r9
 8004f0a:	f7fb f961 	bl	80001d0 <__aeabi_dsub>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	2000      	movs	r0, #0
 8004f14:	4928      	ldr	r1, [pc, #160]	@ (8004fb8 <__ieee754_exp+0x2e8>)
 8004f16:	f7fb f95b 	bl	80001d0 <__aeabi_dsub>
 8004f1a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8004f1e:	4592      	cmp	sl, r2
 8004f20:	db02      	blt.n	8004f28 <__ieee754_exp+0x258>
 8004f22:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8004f26:	e6eb      	b.n	8004d00 <__ieee754_exp+0x30>
 8004f28:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8004f2c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8004f30:	2200      	movs	r2, #0
 8004f32:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8004f36:	f7fb fb03 	bl	8000540 <__aeabi_dmul>
 8004f3a:	e6e1      	b.n	8004d00 <__ieee754_exp+0x30>
 8004f3c:	2400      	movs	r4, #0
 8004f3e:	2500      	movs	r5, #0
 8004f40:	e6e4      	b.n	8004d0c <__ieee754_exp+0x3c>
 8004f42:	bf00      	nop
 8004f44:	f3af 8000 	nop.w
 8004f48:	fefa39ef 	.word	0xfefa39ef
 8004f4c:	40862e42 	.word	0x40862e42
 8004f50:	d52d3051 	.word	0xd52d3051
 8004f54:	c0874910 	.word	0xc0874910
 8004f58:	72bea4d0 	.word	0x72bea4d0
 8004f5c:	3e663769 	.word	0x3e663769
 8004f60:	c5d26bf1 	.word	0xc5d26bf1
 8004f64:	3ebbbd41 	.word	0x3ebbbd41
 8004f68:	af25de2c 	.word	0xaf25de2c
 8004f6c:	3f11566a 	.word	0x3f11566a
 8004f70:	16bebd93 	.word	0x16bebd93
 8004f74:	3f66c16c 	.word	0x3f66c16c
 8004f78:	5555553e 	.word	0x5555553e
 8004f7c:	3fc55555 	.word	0x3fc55555
 8004f80:	652b82fe 	.word	0x652b82fe
 8004f84:	3ff71547 	.word	0x3ff71547
 8004f88:	fee00000 	.word	0xfee00000
 8004f8c:	3fe62e42 	.word	0x3fe62e42
 8004f90:	35793c76 	.word	0x35793c76
 8004f94:	3dea39ef 	.word	0x3dea39ef
 8004f98:	8800759c 	.word	0x8800759c
 8004f9c:	7e37e43c 	.word	0x7e37e43c
 8004fa0:	40862e41 	.word	0x40862e41
 8004fa4:	7fefffff 	.word	0x7fefffff
 8004fa8:	3fd62e42 	.word	0x3fd62e42
 8004fac:	3ff0a2b1 	.word	0x3ff0a2b1
 8004fb0:	08005080 	.word	0x08005080
 8004fb4:	08005070 	.word	0x08005070
 8004fb8:	3ff00000 	.word	0x3ff00000
 8004fbc:	08005090 	.word	0x08005090
 8004fc0:	3defffff 	.word	0x3defffff

08004fc4 <with_errno>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	ed2d 8b02 	vpush	{d8}
 8004fca:	eeb0 8a40 	vmov.f32	s16, s0
 8004fce:	eef0 8a60 	vmov.f32	s17, s1
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	f7ff fdfe 	bl	8004bd4 <__errno>
 8004fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8004fdc:	eef0 0a68 	vmov.f32	s1, s17
 8004fe0:	ecbd 8b02 	vpop	{d8}
 8004fe4:	6004      	str	r4, [r0, #0]
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <xflow>:
 8004fe8:	4603      	mov	r3, r0
 8004fea:	b507      	push	{r0, r1, r2, lr}
 8004fec:	ec51 0b10 	vmov	r0, r1, d0
 8004ff0:	b183      	cbz	r3, 8005014 <xflow+0x2c>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8004ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005000:	f7fb fa9e 	bl	8000540 <__aeabi_dmul>
 8005004:	ec41 0b10 	vmov	d0, r0, r1
 8005008:	2022      	movs	r0, #34	@ 0x22
 800500a:	b003      	add	sp, #12
 800500c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005010:	f7ff bfd8 	b.w	8004fc4 <with_errno>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	e7ee      	b.n	8004ff8 <xflow+0x10>
 800501a:	0000      	movs	r0, r0
 800501c:	0000      	movs	r0, r0
	...

08005020 <__math_uflow>:
 8005020:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005028 <__math_uflow+0x8>
 8005024:	f7ff bfe0 	b.w	8004fe8 <xflow>
 8005028:	00000000 	.word	0x00000000
 800502c:	10000000 	.word	0x10000000

08005030 <__math_oflow>:
 8005030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005038 <__math_oflow+0x8>
 8005034:	f7ff bfd8 	b.w	8004fe8 <xflow>
 8005038:	00000000 	.word	0x00000000
 800503c:	70000000 	.word	0x70000000

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
